# coding: utf-8

"""
    Marketing Events

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.marketing.events.configuration import Configuration


class AttendanceCounters(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"attended": "int", "registered": "int", "cancelled": "int", "no_shows": "int"}

    attribute_map = {"attended": "attended", "registered": "registered", "cancelled": "cancelled", "no_shows": "noShows"}

    def __init__(self, attended=None, registered=None, cancelled=None, no_shows=None, local_vars_configuration=None):  # noqa: E501
        """AttendanceCounters - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._attended = None
        self._registered = None
        self._cancelled = None
        self._no_shows = None
        self.discriminator = None

        self.attended = attended
        self.registered = registered
        self.cancelled = cancelled
        self.no_shows = no_shows

    @property
    def attended(self):
        """Gets the attended of this AttendanceCounters.  # noqa: E501


        :return: The attended of this AttendanceCounters.  # noqa: E501
        :rtype: int
        """
        return self._attended

    @attended.setter
    def attended(self, attended):
        """Sets the attended of this AttendanceCounters.


        :param attended: The attended of this AttendanceCounters.  # noqa: E501
        :type attended: int
        """
        if self.local_vars_configuration.client_side_validation and attended is None:  # noqa: E501
            raise ValueError("Invalid value for `attended`, must not be `None`")  # noqa: E501

        self._attended = attended

    @property
    def registered(self):
        """Gets the registered of this AttendanceCounters.  # noqa: E501


        :return: The registered of this AttendanceCounters.  # noqa: E501
        :rtype: int
        """
        return self._registered

    @registered.setter
    def registered(self, registered):
        """Sets the registered of this AttendanceCounters.


        :param registered: The registered of this AttendanceCounters.  # noqa: E501
        :type registered: int
        """
        if self.local_vars_configuration.client_side_validation and registered is None:  # noqa: E501
            raise ValueError("Invalid value for `registered`, must not be `None`")  # noqa: E501

        self._registered = registered

    @property
    def cancelled(self):
        """Gets the cancelled of this AttendanceCounters.  # noqa: E501


        :return: The cancelled of this AttendanceCounters.  # noqa: E501
        :rtype: int
        """
        return self._cancelled

    @cancelled.setter
    def cancelled(self, cancelled):
        """Sets the cancelled of this AttendanceCounters.


        :param cancelled: The cancelled of this AttendanceCounters.  # noqa: E501
        :type cancelled: int
        """
        if self.local_vars_configuration.client_side_validation and cancelled is None:  # noqa: E501
            raise ValueError("Invalid value for `cancelled`, must not be `None`")  # noqa: E501

        self._cancelled = cancelled

    @property
    def no_shows(self):
        """Gets the no_shows of this AttendanceCounters.  # noqa: E501


        :return: The no_shows of this AttendanceCounters.  # noqa: E501
        :rtype: int
        """
        return self._no_shows

    @no_shows.setter
    def no_shows(self, no_shows):
        """Sets the no_shows of this AttendanceCounters.


        :param no_shows: The no_shows of this AttendanceCounters.  # noqa: E501
        :type no_shows: int
        """
        if self.local_vars_configuration.client_side_validation and no_shows is None:  # noqa: E501
            raise ValueError("Invalid value for `no_shows`, must not be `None`")  # noqa: E501

        self._no_shows = no_shows

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AttendanceCounters):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AttendanceCounters):
            return True

        return self.to_dict() != other.to_dict()
