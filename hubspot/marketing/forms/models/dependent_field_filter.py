# coding: utf-8

"""
    Forms

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.marketing.forms.configuration import Configuration


class DependentFieldFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"range_start": "str", "values": "list[str]", "value": "str", "operator": "str", "range_end": "str"}

    attribute_map = {"range_start": "rangeStart", "values": "values", "value": "value", "operator": "operator", "range_end": "rangeEnd"}

    def __init__(self, range_start=None, values=None, value=None, operator=None, range_end=None, local_vars_configuration=None):  # noqa: E501
        """DependentFieldFilter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._range_start = None
        self._values = None
        self._value = None
        self._operator = None
        self._range_end = None
        self.discriminator = None

        self.range_start = range_start
        self.values = values
        self.value = value
        self.operator = operator
        self.range_end = range_end

    @property
    def range_start(self):
        """Gets the range_start of this DependentFieldFilter.  # noqa: E501

          # noqa: E501

        :return: The range_start of this DependentFieldFilter.  # noqa: E501
        :rtype: str
        """
        return self._range_start

    @range_start.setter
    def range_start(self, range_start):
        """Sets the range_start of this DependentFieldFilter.

          # noqa: E501

        :param range_start: The range_start of this DependentFieldFilter.  # noqa: E501
        :type range_start: str
        """
        if self.local_vars_configuration.client_side_validation and range_start is None:  # noqa: E501
            raise ValueError("Invalid value for `range_start`, must not be `None`")  # noqa: E501

        self._range_start = range_start

    @property
    def values(self):
        """Gets the values of this DependentFieldFilter.  # noqa: E501

          # noqa: E501

        :return: The values of this DependentFieldFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this DependentFieldFilter.

          # noqa: E501

        :param values: The values of this DependentFieldFilter.  # noqa: E501
        :type values: list[str]
        """
        if self.local_vars_configuration.client_side_validation and values is None:  # noqa: E501
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values

    @property
    def value(self):
        """Gets the value of this DependentFieldFilter.  # noqa: E501

          # noqa: E501

        :return: The value of this DependentFieldFilter.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DependentFieldFilter.

          # noqa: E501

        :param value: The value of this DependentFieldFilter.  # noqa: E501
        :type value: str
        """
        if self.local_vars_configuration.client_side_validation and value is None:  # noqa: E501
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def operator(self):
        """Gets the operator of this DependentFieldFilter.  # noqa: E501

          # noqa: E501

        :return: The operator of this DependentFieldFilter.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this DependentFieldFilter.

          # noqa: E501

        :param operator: The operator of this DependentFieldFilter.  # noqa: E501
        :type operator: str
        """
        if self.local_vars_configuration.client_side_validation and operator is None:  # noqa: E501
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501
        allowed_values = [
            "eq",
            "neq",
            "contains",
            "doesnt_contain",
            "str_starts_with",
            "str_ends_with",
            "lt",
            "lte",
            "gt",
            "gte",
            "between",
            "not_between",
            "within_time_reverse",
            "within_time",
            "set_any",
            "set_not_any",
            "set_all",
            "set_not_all",
            "set_eq",
            "set_neq",
            "is_not_empty",
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and operator not in allowed_values:  # noqa: E501
            raise ValueError("Invalid value for `operator` ({0}), must be one of {1}".format(operator, allowed_values))  # noqa: E501

        self._operator = operator

    @property
    def range_end(self):
        """Gets the range_end of this DependentFieldFilter.  # noqa: E501

          # noqa: E501

        :return: The range_end of this DependentFieldFilter.  # noqa: E501
        :rtype: str
        """
        return self._range_end

    @range_end.setter
    def range_end(self, range_end):
        """Sets the range_end of this DependentFieldFilter.

          # noqa: E501

        :param range_end: The range_end of this DependentFieldFilter.  # noqa: E501
        :type range_end: str
        """
        if self.local_vars_configuration.client_side_validation and range_end is None:  # noqa: E501
            raise ValueError("Invalid value for `range_end`, must not be `None`")  # noqa: E501

        self._range_end = range_end

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DependentFieldFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DependentFieldFilter):
            return True

        return self.to_dict() != other.to_dict()
