# coding: utf-8

"""
    Forms

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.marketing.forms.configuration import Configuration


class LegalConsentOptionsImplicitConsentToProcess(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"communications_checkboxes": "list[LegalConsentCheckbox]", "communication_consent_text": "str", "type": "str", "privacy_text": "str", "consent_to_process_text": "str"}

    attribute_map = {
        "communications_checkboxes": "communicationsCheckboxes",
        "communication_consent_text": "communicationConsentText",
        "type": "type",
        "privacy_text": "privacyText",
        "consent_to_process_text": "consentToProcessText",
    }

    def __init__(
        self, communications_checkboxes=None, communication_consent_text=None, type="implicit_consent_to_process", privacy_text=None, consent_to_process_text=None, local_vars_configuration=None
    ):  # noqa: E501
        """LegalConsentOptionsImplicitConsentToProcess - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._communications_checkboxes = None
        self._communication_consent_text = None
        self._type = None
        self._privacy_text = None
        self._consent_to_process_text = None
        self.discriminator = None

        self.communications_checkboxes = communications_checkboxes
        if communication_consent_text is not None:
            self.communication_consent_text = communication_consent_text
        self.type = type
        self.privacy_text = privacy_text
        if consent_to_process_text is not None:
            self.consent_to_process_text = consent_to_process_text

    @property
    def communications_checkboxes(self):
        """Gets the communications_checkboxes of this LegalConsentOptionsImplicitConsentToProcess.  # noqa: E501

          # noqa: E501

        :return: The communications_checkboxes of this LegalConsentOptionsImplicitConsentToProcess.  # noqa: E501
        :rtype: list[LegalConsentCheckbox]
        """
        return self._communications_checkboxes

    @communications_checkboxes.setter
    def communications_checkboxes(self, communications_checkboxes):
        """Sets the communications_checkboxes of this LegalConsentOptionsImplicitConsentToProcess.

          # noqa: E501

        :param communications_checkboxes: The communications_checkboxes of this LegalConsentOptionsImplicitConsentToProcess.  # noqa: E501
        :type communications_checkboxes: list[LegalConsentCheckbox]
        """
        if self.local_vars_configuration.client_side_validation and communications_checkboxes is None:  # noqa: E501
            raise ValueError("Invalid value for `communications_checkboxes`, must not be `None`")  # noqa: E501

        self._communications_checkboxes = communications_checkboxes

    @property
    def communication_consent_text(self):
        """Gets the communication_consent_text of this LegalConsentOptionsImplicitConsentToProcess.  # noqa: E501

          # noqa: E501

        :return: The communication_consent_text of this LegalConsentOptionsImplicitConsentToProcess.  # noqa: E501
        :rtype: str
        """
        return self._communication_consent_text

    @communication_consent_text.setter
    def communication_consent_text(self, communication_consent_text):
        """Sets the communication_consent_text of this LegalConsentOptionsImplicitConsentToProcess.

          # noqa: E501

        :param communication_consent_text: The communication_consent_text of this LegalConsentOptionsImplicitConsentToProcess.  # noqa: E501
        :type communication_consent_text: str
        """

        self._communication_consent_text = communication_consent_text

    @property
    def type(self):
        """Gets the type of this LegalConsentOptionsImplicitConsentToProcess.  # noqa: E501

          # noqa: E501

        :return: The type of this LegalConsentOptionsImplicitConsentToProcess.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this LegalConsentOptionsImplicitConsentToProcess.

          # noqa: E501

        :param type: The type of this LegalConsentOptionsImplicitConsentToProcess.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["implicit_consent_to_process"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError("Invalid value for `type` ({0}), must be one of {1}".format(type, allowed_values))  # noqa: E501

        self._type = type

    @property
    def privacy_text(self):
        """Gets the privacy_text of this LegalConsentOptionsImplicitConsentToProcess.  # noqa: E501

          # noqa: E501

        :return: The privacy_text of this LegalConsentOptionsImplicitConsentToProcess.  # noqa: E501
        :rtype: str
        """
        return self._privacy_text

    @privacy_text.setter
    def privacy_text(self, privacy_text):
        """Sets the privacy_text of this LegalConsentOptionsImplicitConsentToProcess.

          # noqa: E501

        :param privacy_text: The privacy_text of this LegalConsentOptionsImplicitConsentToProcess.  # noqa: E501
        :type privacy_text: str
        """
        if self.local_vars_configuration.client_side_validation and privacy_text is None:  # noqa: E501
            raise ValueError("Invalid value for `privacy_text`, must not be `None`")  # noqa: E501

        self._privacy_text = privacy_text

    @property
    def consent_to_process_text(self):
        """Gets the consent_to_process_text of this LegalConsentOptionsImplicitConsentToProcess.  # noqa: E501

          # noqa: E501

        :return: The consent_to_process_text of this LegalConsentOptionsImplicitConsentToProcess.  # noqa: E501
        :rtype: str
        """
        return self._consent_to_process_text

    @consent_to_process_text.setter
    def consent_to_process_text(self, consent_to_process_text):
        """Sets the consent_to_process_text of this LegalConsentOptionsImplicitConsentToProcess.

          # noqa: E501

        :param consent_to_process_text: The consent_to_process_text of this LegalConsentOptionsImplicitConsentToProcess.  # noqa: E501
        :type consent_to_process_text: str
        """

        self._consent_to_process_text = consent_to_process_text

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LegalConsentOptionsImplicitConsentToProcess):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LegalConsentOptionsImplicitConsentToProcess):
            return True

        return self.to_dict() != other.to_dict()
