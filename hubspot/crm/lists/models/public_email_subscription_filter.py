# coding: utf-8

"""
    Lists

    CRUD operations to manage lists and list memberships  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.crm.lists.configuration import Configuration


class PublicEmailSubscriptionFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"filter_type": "str", "subscription_ids": "list[int]", "accepted_statuses": "list[str]", "subscription_type": "str"}

    attribute_map = {"filter_type": "filterType", "subscription_ids": "subscriptionIds", "accepted_statuses": "acceptedStatuses", "subscription_type": "subscriptionType"}

    def __init__(self, filter_type="EMAIL_SUBSCRIPTION", subscription_ids=None, accepted_statuses=None, subscription_type=None, local_vars_configuration=None):  # noqa: E501
        """PublicEmailSubscriptionFilter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._filter_type = None
        self._subscription_ids = None
        self._accepted_statuses = None
        self._subscription_type = None
        self.discriminator = None

        self.filter_type = filter_type
        self.subscription_ids = subscription_ids
        self.accepted_statuses = accepted_statuses
        if subscription_type is not None:
            self.subscription_type = subscription_type

    @property
    def filter_type(self):
        """Gets the filter_type of this PublicEmailSubscriptionFilter.  # noqa: E501


        :return: The filter_type of this PublicEmailSubscriptionFilter.  # noqa: E501
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """Sets the filter_type of this PublicEmailSubscriptionFilter.


        :param filter_type: The filter_type of this PublicEmailSubscriptionFilter.  # noqa: E501
        :type filter_type: str
        """
        if self.local_vars_configuration.client_side_validation and filter_type is None:  # noqa: E501
            raise ValueError("Invalid value for `filter_type`, must not be `None`")  # noqa: E501
        allowed_values = ["EMAIL_SUBSCRIPTION"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and filter_type not in allowed_values:  # noqa: E501
            raise ValueError("Invalid value for `filter_type` ({0}), must be one of {1}".format(filter_type, allowed_values))  # noqa: E501

        self._filter_type = filter_type

    @property
    def subscription_ids(self):
        """Gets the subscription_ids of this PublicEmailSubscriptionFilter.  # noqa: E501


        :return: The subscription_ids of this PublicEmailSubscriptionFilter.  # noqa: E501
        :rtype: list[int]
        """
        return self._subscription_ids

    @subscription_ids.setter
    def subscription_ids(self, subscription_ids):
        """Sets the subscription_ids of this PublicEmailSubscriptionFilter.


        :param subscription_ids: The subscription_ids of this PublicEmailSubscriptionFilter.  # noqa: E501
        :type subscription_ids: list[int]
        """
        if self.local_vars_configuration.client_side_validation and subscription_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `subscription_ids`, must not be `None`")  # noqa: E501

        self._subscription_ids = subscription_ids

    @property
    def accepted_statuses(self):
        """Gets the accepted_statuses of this PublicEmailSubscriptionFilter.  # noqa: E501


        :return: The accepted_statuses of this PublicEmailSubscriptionFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._accepted_statuses

    @accepted_statuses.setter
    def accepted_statuses(self, accepted_statuses):
        """Sets the accepted_statuses of this PublicEmailSubscriptionFilter.


        :param accepted_statuses: The accepted_statuses of this PublicEmailSubscriptionFilter.  # noqa: E501
        :type accepted_statuses: list[str]
        """
        if self.local_vars_configuration.client_side_validation and accepted_statuses is None:  # noqa: E501
            raise ValueError("Invalid value for `accepted_statuses`, must not be `None`")  # noqa: E501

        self._accepted_statuses = accepted_statuses

    @property
    def subscription_type(self):
        """Gets the subscription_type of this PublicEmailSubscriptionFilter.  # noqa: E501


        :return: The subscription_type of this PublicEmailSubscriptionFilter.  # noqa: E501
        :rtype: str
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type):
        """Sets the subscription_type of this PublicEmailSubscriptionFilter.


        :param subscription_type: The subscription_type of this PublicEmailSubscriptionFilter.  # noqa: E501
        :type subscription_type: str
        """

        self._subscription_type = subscription_type

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicEmailSubscriptionFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicEmailSubscriptionFilter):
            return True

        return self.to_dict() != other.to_dict()
