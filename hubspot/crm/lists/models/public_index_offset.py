# coding: utf-8

"""
    Lists

    CRUD operations to manage lists and list memberships  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.crm.lists.configuration import Configuration


class PublicIndexOffset(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"years": "int", "quarters": "int", "months": "int", "weeks": "int", "days": "int", "hours": "int", "minutes": "int", "seconds": "int", "milliseconds": "int"}

    attribute_map = {
        "years": "years",
        "quarters": "quarters",
        "months": "months",
        "weeks": "weeks",
        "days": "days",
        "hours": "hours",
        "minutes": "minutes",
        "seconds": "seconds",
        "milliseconds": "milliseconds",
    }

    def __init__(self, years=None, quarters=None, months=None, weeks=None, days=None, hours=None, minutes=None, seconds=None, milliseconds=None, local_vars_configuration=None):  # noqa: E501
        """PublicIndexOffset - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._years = None
        self._quarters = None
        self._months = None
        self._weeks = None
        self._days = None
        self._hours = None
        self._minutes = None
        self._seconds = None
        self._milliseconds = None
        self.discriminator = None

        if years is not None:
            self.years = years
        if quarters is not None:
            self.quarters = quarters
        if months is not None:
            self.months = months
        if weeks is not None:
            self.weeks = weeks
        if days is not None:
            self.days = days
        if hours is not None:
            self.hours = hours
        if minutes is not None:
            self.minutes = minutes
        if seconds is not None:
            self.seconds = seconds
        if milliseconds is not None:
            self.milliseconds = milliseconds

    @property
    def years(self):
        """Gets the years of this PublicIndexOffset.  # noqa: E501


        :return: The years of this PublicIndexOffset.  # noqa: E501
        :rtype: int
        """
        return self._years

    @years.setter
    def years(self, years):
        """Sets the years of this PublicIndexOffset.


        :param years: The years of this PublicIndexOffset.  # noqa: E501
        :type years: int
        """

        self._years = years

    @property
    def quarters(self):
        """Gets the quarters of this PublicIndexOffset.  # noqa: E501


        :return: The quarters of this PublicIndexOffset.  # noqa: E501
        :rtype: int
        """
        return self._quarters

    @quarters.setter
    def quarters(self, quarters):
        """Sets the quarters of this PublicIndexOffset.


        :param quarters: The quarters of this PublicIndexOffset.  # noqa: E501
        :type quarters: int
        """

        self._quarters = quarters

    @property
    def months(self):
        """Gets the months of this PublicIndexOffset.  # noqa: E501


        :return: The months of this PublicIndexOffset.  # noqa: E501
        :rtype: int
        """
        return self._months

    @months.setter
    def months(self, months):
        """Sets the months of this PublicIndexOffset.


        :param months: The months of this PublicIndexOffset.  # noqa: E501
        :type months: int
        """

        self._months = months

    @property
    def weeks(self):
        """Gets the weeks of this PublicIndexOffset.  # noqa: E501


        :return: The weeks of this PublicIndexOffset.  # noqa: E501
        :rtype: int
        """
        return self._weeks

    @weeks.setter
    def weeks(self, weeks):
        """Sets the weeks of this PublicIndexOffset.


        :param weeks: The weeks of this PublicIndexOffset.  # noqa: E501
        :type weeks: int
        """

        self._weeks = weeks

    @property
    def days(self):
        """Gets the days of this PublicIndexOffset.  # noqa: E501


        :return: The days of this PublicIndexOffset.  # noqa: E501
        :rtype: int
        """
        return self._days

    @days.setter
    def days(self, days):
        """Sets the days of this PublicIndexOffset.


        :param days: The days of this PublicIndexOffset.  # noqa: E501
        :type days: int
        """

        self._days = days

    @property
    def hours(self):
        """Gets the hours of this PublicIndexOffset.  # noqa: E501


        :return: The hours of this PublicIndexOffset.  # noqa: E501
        :rtype: int
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this PublicIndexOffset.


        :param hours: The hours of this PublicIndexOffset.  # noqa: E501
        :type hours: int
        """

        self._hours = hours

    @property
    def minutes(self):
        """Gets the minutes of this PublicIndexOffset.  # noqa: E501


        :return: The minutes of this PublicIndexOffset.  # noqa: E501
        :rtype: int
        """
        return self._minutes

    @minutes.setter
    def minutes(self, minutes):
        """Sets the minutes of this PublicIndexOffset.


        :param minutes: The minutes of this PublicIndexOffset.  # noqa: E501
        :type minutes: int
        """

        self._minutes = minutes

    @property
    def seconds(self):
        """Gets the seconds of this PublicIndexOffset.  # noqa: E501


        :return: The seconds of this PublicIndexOffset.  # noqa: E501
        :rtype: int
        """
        return self._seconds

    @seconds.setter
    def seconds(self, seconds):
        """Sets the seconds of this PublicIndexOffset.


        :param seconds: The seconds of this PublicIndexOffset.  # noqa: E501
        :type seconds: int
        """

        self._seconds = seconds

    @property
    def milliseconds(self):
        """Gets the milliseconds of this PublicIndexOffset.  # noqa: E501


        :return: The milliseconds of this PublicIndexOffset.  # noqa: E501
        :rtype: int
        """
        return self._milliseconds

    @milliseconds.setter
    def milliseconds(self, milliseconds):
        """Sets the milliseconds of this PublicIndexOffset.


        :param milliseconds: The milliseconds of this PublicIndexOffset.  # noqa: E501
        :type milliseconds: int
        """

        self._milliseconds = milliseconds

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicIndexOffset):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicIndexOffset):
            return True

        return self.to_dict() != other.to_dict()
