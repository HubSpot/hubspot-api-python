# coding: utf-8

"""
    Lists

    CRUD operations to manage lists and list memberships  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.crm.lists.configuration import Configuration


class PublicRangedNumberPropertyOperation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"operation_type": "str", "operator": "str", "include_objects_with_no_value_set": "bool", "upper_bound": "int", "lower_bound": "int"}

    attribute_map = {
        "operation_type": "operationType",
        "operator": "operator",
        "include_objects_with_no_value_set": "includeObjectsWithNoValueSet",
        "upper_bound": "upperBound",
        "lower_bound": "lowerBound",
    }

    def __init__(self, operation_type="NUMBER_RANGED", operator=None, include_objects_with_no_value_set=None, upper_bound=None, lower_bound=None, local_vars_configuration=None):  # noqa: E501
        """PublicRangedNumberPropertyOperation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._operation_type = None
        self._operator = None
        self._include_objects_with_no_value_set = None
        self._upper_bound = None
        self._lower_bound = None
        self.discriminator = None

        self.operation_type = operation_type
        self.operator = operator
        self.include_objects_with_no_value_set = include_objects_with_no_value_set
        self.upper_bound = upper_bound
        self.lower_bound = lower_bound

    @property
    def operation_type(self):
        """Gets the operation_type of this PublicRangedNumberPropertyOperation.  # noqa: E501


        :return: The operation_type of this PublicRangedNumberPropertyOperation.  # noqa: E501
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this PublicRangedNumberPropertyOperation.


        :param operation_type: The operation_type of this PublicRangedNumberPropertyOperation.  # noqa: E501
        :type operation_type: str
        """
        if self.local_vars_configuration.client_side_validation and operation_type is None:  # noqa: E501
            raise ValueError("Invalid value for `operation_type`, must not be `None`")  # noqa: E501
        allowed_values = ["NUMBER_RANGED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and operation_type not in allowed_values:  # noqa: E501
            raise ValueError("Invalid value for `operation_type` ({0}), must be one of {1}".format(operation_type, allowed_values))  # noqa: E501

        self._operation_type = operation_type

    @property
    def operator(self):
        """Gets the operator of this PublicRangedNumberPropertyOperation.  # noqa: E501


        :return: The operator of this PublicRangedNumberPropertyOperation.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this PublicRangedNumberPropertyOperation.


        :param operator: The operator of this PublicRangedNumberPropertyOperation.  # noqa: E501
        :type operator: str
        """
        if self.local_vars_configuration.client_side_validation and operator is None:  # noqa: E501
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501

        self._operator = operator

    @property
    def include_objects_with_no_value_set(self):
        """Gets the include_objects_with_no_value_set of this PublicRangedNumberPropertyOperation.  # noqa: E501


        :return: The include_objects_with_no_value_set of this PublicRangedNumberPropertyOperation.  # noqa: E501
        :rtype: bool
        """
        return self._include_objects_with_no_value_set

    @include_objects_with_no_value_set.setter
    def include_objects_with_no_value_set(self, include_objects_with_no_value_set):
        """Sets the include_objects_with_no_value_set of this PublicRangedNumberPropertyOperation.


        :param include_objects_with_no_value_set: The include_objects_with_no_value_set of this PublicRangedNumberPropertyOperation.  # noqa: E501
        :type include_objects_with_no_value_set: bool
        """
        if self.local_vars_configuration.client_side_validation and include_objects_with_no_value_set is None:  # noqa: E501
            raise ValueError("Invalid value for `include_objects_with_no_value_set`, must not be `None`")  # noqa: E501

        self._include_objects_with_no_value_set = include_objects_with_no_value_set

    @property
    def upper_bound(self):
        """Gets the upper_bound of this PublicRangedNumberPropertyOperation.  # noqa: E501


        :return: The upper_bound of this PublicRangedNumberPropertyOperation.  # noqa: E501
        :rtype: int
        """
        return self._upper_bound

    @upper_bound.setter
    def upper_bound(self, upper_bound):
        """Sets the upper_bound of this PublicRangedNumberPropertyOperation.


        :param upper_bound: The upper_bound of this PublicRangedNumberPropertyOperation.  # noqa: E501
        :type upper_bound: int
        """
        if self.local_vars_configuration.client_side_validation and upper_bound is None:  # noqa: E501
            raise ValueError("Invalid value for `upper_bound`, must not be `None`")  # noqa: E501

        self._upper_bound = upper_bound

    @property
    def lower_bound(self):
        """Gets the lower_bound of this PublicRangedNumberPropertyOperation.  # noqa: E501


        :return: The lower_bound of this PublicRangedNumberPropertyOperation.  # noqa: E501
        :rtype: int
        """
        return self._lower_bound

    @lower_bound.setter
    def lower_bound(self, lower_bound):
        """Sets the lower_bound of this PublicRangedNumberPropertyOperation.


        :param lower_bound: The lower_bound of this PublicRangedNumberPropertyOperation.  # noqa: E501
        :type lower_bound: int
        """
        if self.local_vars_configuration.client_side_validation and lower_bound is None:  # noqa: E501
            raise ValueError("Invalid value for `lower_bound`, must not be `None`")  # noqa: E501

        self._lower_bound = lower_bound

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicRangedNumberPropertyOperation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicRangedNumberPropertyOperation):
            return True

        return self.to_dict() != other.to_dict()
