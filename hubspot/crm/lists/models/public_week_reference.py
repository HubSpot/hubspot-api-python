# coding: utf-8

"""
    Lists

    CRUD operations to manage lists and list memberships  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.crm.lists.configuration import Configuration


class PublicWeekReference(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"reference_type": "str", "hour": "int", "minute": "int", "second": "int", "millisecond": "int", "day_of_week": "str"}

    attribute_map = {"reference_type": "referenceType", "hour": "hour", "minute": "minute", "second": "second", "millisecond": "millisecond", "day_of_week": "dayOfWeek"}

    def __init__(self, reference_type="WEEK", hour=None, minute=None, second=None, millisecond=None, day_of_week=None, local_vars_configuration=None):  # noqa: E501
        """PublicWeekReference - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._reference_type = None
        self._hour = None
        self._minute = None
        self._second = None
        self._millisecond = None
        self._day_of_week = None
        self.discriminator = None

        self.reference_type = reference_type
        if hour is not None:
            self.hour = hour
        if minute is not None:
            self.minute = minute
        if second is not None:
            self.second = second
        if millisecond is not None:
            self.millisecond = millisecond
        self.day_of_week = day_of_week

    @property
    def reference_type(self):
        """Gets the reference_type of this PublicWeekReference.  # noqa: E501


        :return: The reference_type of this PublicWeekReference.  # noqa: E501
        :rtype: str
        """
        return self._reference_type

    @reference_type.setter
    def reference_type(self, reference_type):
        """Sets the reference_type of this PublicWeekReference.


        :param reference_type: The reference_type of this PublicWeekReference.  # noqa: E501
        :type reference_type: str
        """
        if self.local_vars_configuration.client_side_validation and reference_type is None:  # noqa: E501
            raise ValueError("Invalid value for `reference_type`, must not be `None`")  # noqa: E501
        allowed_values = ["WEEK"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and reference_type not in allowed_values:  # noqa: E501
            raise ValueError("Invalid value for `reference_type` ({0}), must be one of {1}".format(reference_type, allowed_values))  # noqa: E501

        self._reference_type = reference_type

    @property
    def hour(self):
        """Gets the hour of this PublicWeekReference.  # noqa: E501


        :return: The hour of this PublicWeekReference.  # noqa: E501
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this PublicWeekReference.


        :param hour: The hour of this PublicWeekReference.  # noqa: E501
        :type hour: int
        """

        self._hour = hour

    @property
    def minute(self):
        """Gets the minute of this PublicWeekReference.  # noqa: E501


        :return: The minute of this PublicWeekReference.  # noqa: E501
        :rtype: int
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this PublicWeekReference.


        :param minute: The minute of this PublicWeekReference.  # noqa: E501
        :type minute: int
        """

        self._minute = minute

    @property
    def second(self):
        """Gets the second of this PublicWeekReference.  # noqa: E501


        :return: The second of this PublicWeekReference.  # noqa: E501
        :rtype: int
        """
        return self._second

    @second.setter
    def second(self, second):
        """Sets the second of this PublicWeekReference.


        :param second: The second of this PublicWeekReference.  # noqa: E501
        :type second: int
        """

        self._second = second

    @property
    def millisecond(self):
        """Gets the millisecond of this PublicWeekReference.  # noqa: E501


        :return: The millisecond of this PublicWeekReference.  # noqa: E501
        :rtype: int
        """
        return self._millisecond

    @millisecond.setter
    def millisecond(self, millisecond):
        """Sets the millisecond of this PublicWeekReference.


        :param millisecond: The millisecond of this PublicWeekReference.  # noqa: E501
        :type millisecond: int
        """

        self._millisecond = millisecond

    @property
    def day_of_week(self):
        """Gets the day_of_week of this PublicWeekReference.  # noqa: E501


        :return: The day_of_week of this PublicWeekReference.  # noqa: E501
        :rtype: str
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this PublicWeekReference.


        :param day_of_week: The day_of_week of this PublicWeekReference.  # noqa: E501
        :type day_of_week: str
        """
        if self.local_vars_configuration.client_side_validation and day_of_week is None:  # noqa: E501
            raise ValueError("Invalid value for `day_of_week`, must not be `None`")  # noqa: E501
        allowed_values = ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and day_of_week not in allowed_values:  # noqa: E501
            raise ValueError("Invalid value for `day_of_week` ({0}), must be one of {1}".format(day_of_week, allowed_values))  # noqa: E501

        self._day_of_week = day_of_week

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicWeekReference):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicWeekReference):
            return True

        return self.to_dict() != other.to_dict()
