# coding: utf-8

"""
    Lists

    CRUD operations to manage lists and list memberships  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.crm.lists.configuration import Configuration


class PublicRelativeComparativeTimestampRefineBy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"type": "str", "comparison": "str", "time_offset": "PublicTimeOffset"}

    attribute_map = {"type": "type", "comparison": "comparison", "time_offset": "timeOffset"}

    def __init__(self, type="RELATIVE_COMPARATIVE", comparison=None, time_offset=None, local_vars_configuration=None):  # noqa: E501
        """PublicRelativeComparativeTimestampRefineBy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._type = None
        self._comparison = None
        self._time_offset = None
        self.discriminator = None

        self.type = type
        self.comparison = comparison
        self.time_offset = time_offset

    @property
    def type(self):
        """Gets the type of this PublicRelativeComparativeTimestampRefineBy.  # noqa: E501


        :return: The type of this PublicRelativeComparativeTimestampRefineBy.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PublicRelativeComparativeTimestampRefineBy.


        :param type: The type of this PublicRelativeComparativeTimestampRefineBy.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["RELATIVE_COMPARATIVE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError("Invalid value for `type` ({0}), must be one of {1}".format(type, allowed_values))  # noqa: E501

        self._type = type

    @property
    def comparison(self):
        """Gets the comparison of this PublicRelativeComparativeTimestampRefineBy.  # noqa: E501


        :return: The comparison of this PublicRelativeComparativeTimestampRefineBy.  # noqa: E501
        :rtype: str
        """
        return self._comparison

    @comparison.setter
    def comparison(self, comparison):
        """Sets the comparison of this PublicRelativeComparativeTimestampRefineBy.


        :param comparison: The comparison of this PublicRelativeComparativeTimestampRefineBy.  # noqa: E501
        :type comparison: str
        """
        if self.local_vars_configuration.client_side_validation and comparison is None:  # noqa: E501
            raise ValueError("Invalid value for `comparison`, must not be `None`")  # noqa: E501

        self._comparison = comparison

    @property
    def time_offset(self):
        """Gets the time_offset of this PublicRelativeComparativeTimestampRefineBy.  # noqa: E501


        :return: The time_offset of this PublicRelativeComparativeTimestampRefineBy.  # noqa: E501
        :rtype: PublicTimeOffset
        """
        return self._time_offset

    @time_offset.setter
    def time_offset(self, time_offset):
        """Sets the time_offset of this PublicRelativeComparativeTimestampRefineBy.


        :param time_offset: The time_offset of this PublicRelativeComparativeTimestampRefineBy.  # noqa: E501
        :type time_offset: PublicTimeOffset
        """
        if self.local_vars_configuration.client_side_validation and time_offset is None:  # noqa: E501
            raise ValueError("Invalid value for `time_offset`, must not be `None`")  # noqa: E501

        self._time_offset = time_offset

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicRelativeComparativeTimestampRefineBy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicRelativeComparativeTimestampRefineBy):
            return True

        return self.to_dict() != other.to_dict()
