# coding: utf-8

"""
    Lists

    CRUD operations to manage lists and list memberships  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.crm.lists.configuration import Configuration


class PublicPropertyAssociationFilterBranchFiltersInner(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "filter_type": "str",
        "_property": "str",
        "operation": "PublicPropertyFilterOperation",
        "coalescing_refine_by": "PublicEventAnalyticsFilterCoalescingRefineBy",
        "operator": "str",
        "list_id": "int",
        "to_object_type_id": "str",
        "association_type_id": "int",
        "association_category": "str",
        "to_object_type": "str",
        "pruning_refine_by": "PublicEventAnalyticsFilterCoalescingRefineBy",
        "enable_tracking": "bool",
        "page_url": "str",
        "cta_name": "str",
        "event_id": "str",
        "form_id": "str",
        "page_id": "str",
        "event_type_id": "str",
        "filter_lines": "list[PublicEventFilterMetadata]",
        "subscription_ids": "list[int]",
        "accepted_statuses": "list[str]",
        "subscription_type": "str",
        "channel": "str",
        "accepted_opt_states": "list[str]",
        "business_unit_id": "int",
        "campaign_id": "str",
        "survey_id": "str",
        "survey_question": "str",
        "survey_answer_row_id": "str",
        "survey_answer_col_id": "str",
        "value_comparison": "PublicPropertyFilterOperation",
        "webinar_id": "str",
        "level": "str",
        "email_id": "int",
        "app_id": "int",
        "click_url": "str",
        "privacy_name": "str",
        "entity_type": "str",
        "search_term_type": "str",
        "search_terms": "list[str]",
        "ad_network": "str",
        "metadata": "PublicInListFilterMetadata",
        "property_with_object_id": "str",
        "should_accept": "bool",
        "source": "str",
    }

    attribute_map = {
        "filter_type": "filterType",
        "_property": "property",
        "operation": "operation",
        "coalescing_refine_by": "coalescingRefineBy",
        "operator": "operator",
        "list_id": "listId",
        "to_object_type_id": "toObjectTypeId",
        "association_type_id": "associationTypeId",
        "association_category": "associationCategory",
        "to_object_type": "toObjectType",
        "pruning_refine_by": "pruningRefineBy",
        "enable_tracking": "enableTracking",
        "page_url": "pageUrl",
        "cta_name": "ctaName",
        "event_id": "eventId",
        "form_id": "formId",
        "page_id": "pageId",
        "event_type_id": "eventTypeId",
        "filter_lines": "filterLines",
        "subscription_ids": "subscriptionIds",
        "accepted_statuses": "acceptedStatuses",
        "subscription_type": "subscriptionType",
        "channel": "channel",
        "accepted_opt_states": "acceptedOptStates",
        "business_unit_id": "businessUnitId",
        "campaign_id": "campaignId",
        "survey_id": "surveyId",
        "survey_question": "surveyQuestion",
        "survey_answer_row_id": "surveyAnswerRowId",
        "survey_answer_col_id": "surveyAnswerColId",
        "value_comparison": "valueComparison",
        "webinar_id": "webinarId",
        "level": "level",
        "email_id": "emailId",
        "app_id": "appId",
        "click_url": "clickUrl",
        "privacy_name": "privacyName",
        "entity_type": "entityType",
        "search_term_type": "searchTermType",
        "search_terms": "searchTerms",
        "ad_network": "adNetwork",
        "metadata": "metadata",
        "property_with_object_id": "propertyWithObjectId",
        "should_accept": "shouldAccept",
        "source": "source",
    }

    def __init__(
        self,
        filter_type="UNIFIED_EVENTS_IN_LIST",
        _property=None,
        operation=None,
        coalescing_refine_by=None,
        operator=None,
        list_id=None,
        to_object_type_id=None,
        association_type_id=None,
        association_category=None,
        to_object_type=None,
        pruning_refine_by=None,
        enable_tracking=None,
        page_url=None,
        cta_name=None,
        event_id=None,
        form_id=None,
        page_id=None,
        event_type_id=None,
        filter_lines=None,
        subscription_ids=None,
        accepted_statuses=None,
        subscription_type=None,
        channel=None,
        accepted_opt_states=None,
        business_unit_id=None,
        campaign_id=None,
        survey_id=None,
        survey_question=None,
        survey_answer_row_id=None,
        survey_answer_col_id=None,
        value_comparison=None,
        webinar_id=None,
        level=None,
        email_id=None,
        app_id=None,
        click_url=None,
        privacy_name=None,
        entity_type=None,
        search_term_type=None,
        search_terms=None,
        ad_network=None,
        metadata=None,
        property_with_object_id=None,
        should_accept=None,
        source=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """PublicPropertyAssociationFilterBranchFiltersInner - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._filter_type = None
        self.__property = None
        self._operation = None
        self._coalescing_refine_by = None
        self._operator = None
        self._list_id = None
        self._to_object_type_id = None
        self._association_type_id = None
        self._association_category = None
        self._to_object_type = None
        self._pruning_refine_by = None
        self._enable_tracking = None
        self._page_url = None
        self._cta_name = None
        self._event_id = None
        self._form_id = None
        self._page_id = None
        self._event_type_id = None
        self._filter_lines = None
        self._subscription_ids = None
        self._accepted_statuses = None
        self._subscription_type = None
        self._channel = None
        self._accepted_opt_states = None
        self._business_unit_id = None
        self._campaign_id = None
        self._survey_id = None
        self._survey_question = None
        self._survey_answer_row_id = None
        self._survey_answer_col_id = None
        self._value_comparison = None
        self._webinar_id = None
        self._level = None
        self._email_id = None
        self._app_id = None
        self._click_url = None
        self._privacy_name = None
        self._entity_type = None
        self._search_term_type = None
        self._search_terms = None
        self._ad_network = None
        self._metadata = None
        self._property_with_object_id = None
        self._should_accept = None
        self._source = None
        self.discriminator = None

        self.filter_type = filter_type
        self._property = _property
        self.operation = operation
        self.coalescing_refine_by = coalescing_refine_by
        self.operator = operator
        self.list_id = list_id
        if to_object_type_id is not None:
            self.to_object_type_id = to_object_type_id
        self.association_type_id = association_type_id
        self.association_category = association_category
        if to_object_type is not None:
            self.to_object_type = to_object_type
        self.pruning_refine_by = pruning_refine_by
        if enable_tracking is not None:
            self.enable_tracking = enable_tracking
        self.page_url = page_url
        self.cta_name = cta_name
        self.event_id = event_id
        if form_id is not None:
            self.form_id = form_id
        self.page_id = page_id
        self.event_type_id = event_type_id
        self.filter_lines = filter_lines
        self.subscription_ids = subscription_ids
        self.accepted_statuses = accepted_statuses
        self.subscription_type = subscription_type
        self.channel = channel
        self.accepted_opt_states = accepted_opt_states
        if business_unit_id is not None:
            self.business_unit_id = business_unit_id
        self.campaign_id = campaign_id
        self.survey_id = survey_id
        self.survey_question = survey_question
        if survey_answer_row_id is not None:
            self.survey_answer_row_id = survey_answer_row_id
        if survey_answer_col_id is not None:
            self.survey_answer_col_id = survey_answer_col_id
        self.value_comparison = value_comparison
        if webinar_id is not None:
            self.webinar_id = webinar_id
        self.level = level
        self.email_id = email_id
        self.app_id = app_id
        if click_url is not None:
            self.click_url = click_url
        self.privacy_name = privacy_name
        self.entity_type = entity_type
        self.search_term_type = search_term_type
        self.search_terms = search_terms
        self.ad_network = ad_network
        if metadata is not None:
            self.metadata = metadata
        self.property_with_object_id = property_with_object_id
        self.should_accept = should_accept
        if source is not None:
            self.source = source

    @property
    def filter_type(self):
        """Gets the filter_type of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The filter_type of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """Sets the filter_type of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param filter_type: The filter_type of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type filter_type: str
        """
        if self.local_vars_configuration.client_side_validation and filter_type is None:  # noqa: E501
            raise ValueError("Invalid value for `filter_type`, must not be `None`")  # noqa: E501
        allowed_values = ["UNIFIED_EVENTS_IN_LIST"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and filter_type not in allowed_values:  # noqa: E501
            raise ValueError("Invalid value for `filter_type` ({0}), must be one of {1}".format(filter_type, allowed_values))  # noqa: E501

        self._filter_type = filter_type

    @property
    def _property(self):
        """Gets the _property of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The _property of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param _property: The _property of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type _property: str
        """
        if self.local_vars_configuration.client_side_validation and _property is None:  # noqa: E501
            raise ValueError("Invalid value for `_property`, must not be `None`")  # noqa: E501

        self.__property = _property

    @property
    def operation(self):
        """Gets the operation of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The operation of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: PublicPropertyFilterOperation
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param operation: The operation of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type operation: PublicPropertyFilterOperation
        """
        if self.local_vars_configuration.client_side_validation and operation is None:  # noqa: E501
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501

        self._operation = operation

    @property
    def coalescing_refine_by(self):
        """Gets the coalescing_refine_by of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The coalescing_refine_by of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: PublicEventAnalyticsFilterCoalescingRefineBy
        """
        return self._coalescing_refine_by

    @coalescing_refine_by.setter
    def coalescing_refine_by(self, coalescing_refine_by):
        """Sets the coalescing_refine_by of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param coalescing_refine_by: The coalescing_refine_by of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type coalescing_refine_by: PublicEventAnalyticsFilterCoalescingRefineBy
        """
        if self.local_vars_configuration.client_side_validation and coalescing_refine_by is None:  # noqa: E501
            raise ValueError("Invalid value for `coalescing_refine_by`, must not be `None`")  # noqa: E501

        self._coalescing_refine_by = coalescing_refine_by

    @property
    def operator(self):
        """Gets the operator of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The operator of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param operator: The operator of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type operator: str
        """
        if self.local_vars_configuration.client_side_validation and operator is None:  # noqa: E501
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501

        self._operator = operator

    @property
    def list_id(self):
        """Gets the list_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The list_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: int
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param list_id: The list_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type list_id: int
        """
        if self.local_vars_configuration.client_side_validation and list_id is None:  # noqa: E501
            raise ValueError("Invalid value for `list_id`, must not be `None`")  # noqa: E501

        self._list_id = list_id

    @property
    def to_object_type_id(self):
        """Gets the to_object_type_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The to_object_type_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._to_object_type_id

    @to_object_type_id.setter
    def to_object_type_id(self, to_object_type_id):
        """Sets the to_object_type_id of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param to_object_type_id: The to_object_type_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type to_object_type_id: str
        """

        self._to_object_type_id = to_object_type_id

    @property
    def association_type_id(self):
        """Gets the association_type_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The association_type_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: int
        """
        return self._association_type_id

    @association_type_id.setter
    def association_type_id(self, association_type_id):
        """Sets the association_type_id of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param association_type_id: The association_type_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type association_type_id: int
        """
        if self.local_vars_configuration.client_side_validation and association_type_id is None:  # noqa: E501
            raise ValueError("Invalid value for `association_type_id`, must not be `None`")  # noqa: E501

        self._association_type_id = association_type_id

    @property
    def association_category(self):
        """Gets the association_category of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The association_category of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._association_category

    @association_category.setter
    def association_category(self, association_category):
        """Sets the association_category of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param association_category: The association_category of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type association_category: str
        """
        if self.local_vars_configuration.client_side_validation and association_category is None:  # noqa: E501
            raise ValueError("Invalid value for `association_category`, must not be `None`")  # noqa: E501

        self._association_category = association_category

    @property
    def to_object_type(self):
        """Gets the to_object_type of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The to_object_type of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._to_object_type

    @to_object_type.setter
    def to_object_type(self, to_object_type):
        """Sets the to_object_type of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param to_object_type: The to_object_type of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type to_object_type: str
        """

        self._to_object_type = to_object_type

    @property
    def pruning_refine_by(self):
        """Gets the pruning_refine_by of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The pruning_refine_by of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: PublicEventAnalyticsFilterCoalescingRefineBy
        """
        return self._pruning_refine_by

    @pruning_refine_by.setter
    def pruning_refine_by(self, pruning_refine_by):
        """Sets the pruning_refine_by of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param pruning_refine_by: The pruning_refine_by of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type pruning_refine_by: PublicEventAnalyticsFilterCoalescingRefineBy
        """
        if self.local_vars_configuration.client_side_validation and pruning_refine_by is None:  # noqa: E501
            raise ValueError("Invalid value for `pruning_refine_by`, must not be `None`")  # noqa: E501

        self._pruning_refine_by = pruning_refine_by

    @property
    def enable_tracking(self):
        """Gets the enable_tracking of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The enable_tracking of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: bool
        """
        return self._enable_tracking

    @enable_tracking.setter
    def enable_tracking(self, enable_tracking):
        """Sets the enable_tracking of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param enable_tracking: The enable_tracking of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type enable_tracking: bool
        """

        self._enable_tracking = enable_tracking

    @property
    def page_url(self):
        """Gets the page_url of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The page_url of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._page_url

    @page_url.setter
    def page_url(self, page_url):
        """Sets the page_url of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param page_url: The page_url of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type page_url: str
        """
        if self.local_vars_configuration.client_side_validation and page_url is None:  # noqa: E501
            raise ValueError("Invalid value for `page_url`, must not be `None`")  # noqa: E501

        self._page_url = page_url

    @property
    def cta_name(self):
        """Gets the cta_name of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The cta_name of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._cta_name

    @cta_name.setter
    def cta_name(self, cta_name):
        """Sets the cta_name of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param cta_name: The cta_name of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type cta_name: str
        """
        if self.local_vars_configuration.client_side_validation and cta_name is None:  # noqa: E501
            raise ValueError("Invalid value for `cta_name`, must not be `None`")  # noqa: E501

        self._cta_name = cta_name

    @property
    def event_id(self):
        """Gets the event_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The event_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param event_id: The event_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type event_id: str
        """
        if self.local_vars_configuration.client_side_validation and event_id is None:  # noqa: E501
            raise ValueError("Invalid value for `event_id`, must not be `None`")  # noqa: E501

        self._event_id = event_id

    @property
    def form_id(self):
        """Gets the form_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The form_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._form_id

    @form_id.setter
    def form_id(self, form_id):
        """Sets the form_id of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param form_id: The form_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type form_id: str
        """

        self._form_id = form_id

    @property
    def page_id(self):
        """Gets the page_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The page_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._page_id

    @page_id.setter
    def page_id(self, page_id):
        """Sets the page_id of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param page_id: The page_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type page_id: str
        """
        if self.local_vars_configuration.client_side_validation and page_id is None:  # noqa: E501
            raise ValueError("Invalid value for `page_id`, must not be `None`")  # noqa: E501

        self._page_id = page_id

    @property
    def event_type_id(self):
        """Gets the event_type_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The event_type_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._event_type_id

    @event_type_id.setter
    def event_type_id(self, event_type_id):
        """Sets the event_type_id of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param event_type_id: The event_type_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type event_type_id: str
        """
        if self.local_vars_configuration.client_side_validation and event_type_id is None:  # noqa: E501
            raise ValueError("Invalid value for `event_type_id`, must not be `None`")  # noqa: E501

        self._event_type_id = event_type_id

    @property
    def filter_lines(self):
        """Gets the filter_lines of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The filter_lines of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: list[PublicEventFilterMetadata]
        """
        return self._filter_lines

    @filter_lines.setter
    def filter_lines(self, filter_lines):
        """Sets the filter_lines of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param filter_lines: The filter_lines of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type filter_lines: list[PublicEventFilterMetadata]
        """
        if self.local_vars_configuration.client_side_validation and filter_lines is None:  # noqa: E501
            raise ValueError("Invalid value for `filter_lines`, must not be `None`")  # noqa: E501

        self._filter_lines = filter_lines

    @property
    def subscription_ids(self):
        """Gets the subscription_ids of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The subscription_ids of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: list[int]
        """
        return self._subscription_ids

    @subscription_ids.setter
    def subscription_ids(self, subscription_ids):
        """Sets the subscription_ids of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param subscription_ids: The subscription_ids of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type subscription_ids: list[int]
        """
        if self.local_vars_configuration.client_side_validation and subscription_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `subscription_ids`, must not be `None`")  # noqa: E501

        self._subscription_ids = subscription_ids

    @property
    def accepted_statuses(self):
        """Gets the accepted_statuses of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The accepted_statuses of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: list[str]
        """
        return self._accepted_statuses

    @accepted_statuses.setter
    def accepted_statuses(self, accepted_statuses):
        """Sets the accepted_statuses of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param accepted_statuses: The accepted_statuses of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type accepted_statuses: list[str]
        """
        if self.local_vars_configuration.client_side_validation and accepted_statuses is None:  # noqa: E501
            raise ValueError("Invalid value for `accepted_statuses`, must not be `None`")  # noqa: E501

        self._accepted_statuses = accepted_statuses

    @property
    def subscription_type(self):
        """Gets the subscription_type of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The subscription_type of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._subscription_type

    @subscription_type.setter
    def subscription_type(self, subscription_type):
        """Sets the subscription_type of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param subscription_type: The subscription_type of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type subscription_type: str
        """
        if self.local_vars_configuration.client_side_validation and subscription_type is None:  # noqa: E501
            raise ValueError("Invalid value for `subscription_type`, must not be `None`")  # noqa: E501

        self._subscription_type = subscription_type

    @property
    def channel(self):
        """Gets the channel of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The channel of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param channel: The channel of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type channel: str
        """
        if self.local_vars_configuration.client_side_validation and channel is None:  # noqa: E501
            raise ValueError("Invalid value for `channel`, must not be `None`")  # noqa: E501

        self._channel = channel

    @property
    def accepted_opt_states(self):
        """Gets the accepted_opt_states of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The accepted_opt_states of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: list[str]
        """
        return self._accepted_opt_states

    @accepted_opt_states.setter
    def accepted_opt_states(self, accepted_opt_states):
        """Sets the accepted_opt_states of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param accepted_opt_states: The accepted_opt_states of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type accepted_opt_states: list[str]
        """
        if self.local_vars_configuration.client_side_validation and accepted_opt_states is None:  # noqa: E501
            raise ValueError("Invalid value for `accepted_opt_states`, must not be `None`")  # noqa: E501

        self._accepted_opt_states = accepted_opt_states

    @property
    def business_unit_id(self):
        """Gets the business_unit_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The business_unit_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: int
        """
        return self._business_unit_id

    @business_unit_id.setter
    def business_unit_id(self, business_unit_id):
        """Sets the business_unit_id of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param business_unit_id: The business_unit_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type business_unit_id: int
        """

        self._business_unit_id = business_unit_id

    @property
    def campaign_id(self):
        """Gets the campaign_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The campaign_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param campaign_id: The campaign_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type campaign_id: str
        """
        if self.local_vars_configuration.client_side_validation and campaign_id is None:  # noqa: E501
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")  # noqa: E501

        self._campaign_id = campaign_id

    @property
    def survey_id(self):
        """Gets the survey_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The survey_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._survey_id

    @survey_id.setter
    def survey_id(self, survey_id):
        """Sets the survey_id of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param survey_id: The survey_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type survey_id: str
        """
        if self.local_vars_configuration.client_side_validation and survey_id is None:  # noqa: E501
            raise ValueError("Invalid value for `survey_id`, must not be `None`")  # noqa: E501

        self._survey_id = survey_id

    @property
    def survey_question(self):
        """Gets the survey_question of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The survey_question of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._survey_question

    @survey_question.setter
    def survey_question(self, survey_question):
        """Sets the survey_question of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param survey_question: The survey_question of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type survey_question: str
        """
        if self.local_vars_configuration.client_side_validation and survey_question is None:  # noqa: E501
            raise ValueError("Invalid value for `survey_question`, must not be `None`")  # noqa: E501

        self._survey_question = survey_question

    @property
    def survey_answer_row_id(self):
        """Gets the survey_answer_row_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The survey_answer_row_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._survey_answer_row_id

    @survey_answer_row_id.setter
    def survey_answer_row_id(self, survey_answer_row_id):
        """Sets the survey_answer_row_id of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param survey_answer_row_id: The survey_answer_row_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type survey_answer_row_id: str
        """

        self._survey_answer_row_id = survey_answer_row_id

    @property
    def survey_answer_col_id(self):
        """Gets the survey_answer_col_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The survey_answer_col_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._survey_answer_col_id

    @survey_answer_col_id.setter
    def survey_answer_col_id(self, survey_answer_col_id):
        """Sets the survey_answer_col_id of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param survey_answer_col_id: The survey_answer_col_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type survey_answer_col_id: str
        """

        self._survey_answer_col_id = survey_answer_col_id

    @property
    def value_comparison(self):
        """Gets the value_comparison of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The value_comparison of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: PublicPropertyFilterOperation
        """
        return self._value_comparison

    @value_comparison.setter
    def value_comparison(self, value_comparison):
        """Sets the value_comparison of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param value_comparison: The value_comparison of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type value_comparison: PublicPropertyFilterOperation
        """
        if self.local_vars_configuration.client_side_validation and value_comparison is None:  # noqa: E501
            raise ValueError("Invalid value for `value_comparison`, must not be `None`")  # noqa: E501

        self._value_comparison = value_comparison

    @property
    def webinar_id(self):
        """Gets the webinar_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The webinar_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._webinar_id

    @webinar_id.setter
    def webinar_id(self, webinar_id):
        """Sets the webinar_id of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param webinar_id: The webinar_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type webinar_id: str
        """

        self._webinar_id = webinar_id

    @property
    def level(self):
        """Gets the level of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The level of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param level: The level of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type level: str
        """
        if self.local_vars_configuration.client_side_validation and level is None:  # noqa: E501
            raise ValueError("Invalid value for `level`, must not be `None`")  # noqa: E501

        self._level = level

    @property
    def email_id(self):
        """Gets the email_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The email_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: int
        """
        return self._email_id

    @email_id.setter
    def email_id(self, email_id):
        """Sets the email_id of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param email_id: The email_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type email_id: int
        """
        if self.local_vars_configuration.client_side_validation and email_id is None:  # noqa: E501
            raise ValueError("Invalid value for `email_id`, must not be `None`")  # noqa: E501

        self._email_id = email_id

    @property
    def app_id(self):
        """Gets the app_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The app_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: int
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param app_id: The app_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type app_id: int
        """
        if self.local_vars_configuration.client_side_validation and app_id is None:  # noqa: E501
            raise ValueError("Invalid value for `app_id`, must not be `None`")  # noqa: E501

        self._app_id = app_id

    @property
    def click_url(self):
        """Gets the click_url of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The click_url of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._click_url

    @click_url.setter
    def click_url(self, click_url):
        """Sets the click_url of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param click_url: The click_url of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type click_url: str
        """

        self._click_url = click_url

    @property
    def privacy_name(self):
        """Gets the privacy_name of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The privacy_name of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._privacy_name

    @privacy_name.setter
    def privacy_name(self, privacy_name):
        """Sets the privacy_name of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param privacy_name: The privacy_name of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type privacy_name: str
        """
        if self.local_vars_configuration.client_side_validation and privacy_name is None:  # noqa: E501
            raise ValueError("Invalid value for `privacy_name`, must not be `None`")  # noqa: E501

        self._privacy_name = privacy_name

    @property
    def entity_type(self):
        """Gets the entity_type of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The entity_type of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param entity_type: The entity_type of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type entity_type: str
        """
        if self.local_vars_configuration.client_side_validation and entity_type is None:  # noqa: E501
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def search_term_type(self):
        """Gets the search_term_type of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The search_term_type of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._search_term_type

    @search_term_type.setter
    def search_term_type(self, search_term_type):
        """Sets the search_term_type of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param search_term_type: The search_term_type of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type search_term_type: str
        """
        if self.local_vars_configuration.client_side_validation and search_term_type is None:  # noqa: E501
            raise ValueError("Invalid value for `search_term_type`, must not be `None`")  # noqa: E501

        self._search_term_type = search_term_type

    @property
    def search_terms(self):
        """Gets the search_terms of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The search_terms of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: list[str]
        """
        return self._search_terms

    @search_terms.setter
    def search_terms(self, search_terms):
        """Sets the search_terms of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param search_terms: The search_terms of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type search_terms: list[str]
        """
        if self.local_vars_configuration.client_side_validation and search_terms is None:  # noqa: E501
            raise ValueError("Invalid value for `search_terms`, must not be `None`")  # noqa: E501

        self._search_terms = search_terms

    @property
    def ad_network(self):
        """Gets the ad_network of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The ad_network of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._ad_network

    @ad_network.setter
    def ad_network(self, ad_network):
        """Sets the ad_network of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param ad_network: The ad_network of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type ad_network: str
        """
        if self.local_vars_configuration.client_side_validation and ad_network is None:  # noqa: E501
            raise ValueError("Invalid value for `ad_network`, must not be `None`")  # noqa: E501

        self._ad_network = ad_network

    @property
    def metadata(self):
        """Gets the metadata of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The metadata of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: PublicInListFilterMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param metadata: The metadata of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type metadata: PublicInListFilterMetadata
        """

        self._metadata = metadata

    @property
    def property_with_object_id(self):
        """Gets the property_with_object_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The property_with_object_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._property_with_object_id

    @property_with_object_id.setter
    def property_with_object_id(self, property_with_object_id):
        """Sets the property_with_object_id of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param property_with_object_id: The property_with_object_id of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type property_with_object_id: str
        """
        if self.local_vars_configuration.client_side_validation and property_with_object_id is None:  # noqa: E501
            raise ValueError("Invalid value for `property_with_object_id`, must not be `None`")  # noqa: E501

        self._property_with_object_id = property_with_object_id

    @property
    def should_accept(self):
        """Gets the should_accept of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The should_accept of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: bool
        """
        return self._should_accept

    @should_accept.setter
    def should_accept(self, should_accept):
        """Sets the should_accept of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param should_accept: The should_accept of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type should_accept: bool
        """
        if self.local_vars_configuration.client_side_validation and should_accept is None:  # noqa: E501
            raise ValueError("Invalid value for `should_accept`, must not be `None`")  # noqa: E501

        self._should_accept = should_accept

    @property
    def source(self):
        """Gets the source of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501


        :return: The source of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PublicPropertyAssociationFilterBranchFiltersInner.


        :param source: The source of this PublicPropertyAssociationFilterBranchFiltersInner.  # noqa: E501
        :type source: str
        """

        self._source = source

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicPropertyAssociationFilterBranchFiltersInner):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicPropertyAssociationFilterBranchFiltersInner):
            return True

        return self.to_dict() != other.to_dict()
