# coding: utf-8

"""
    Lists

    CRUD operations to manage lists and list memberships  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.crm.lists.configuration import Configuration


class PublicPropertyAssociationInListFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "filter_type": "str",
        "coalescing_refine_by": "PublicEventAnalyticsFilterCoalescingRefineBy",
        "operator": "str",
        "list_id": "int",
        "to_object_type_id": "str",
        "property_with_object_id": "str",
    }

    attribute_map = {
        "filter_type": "filterType",
        "coalescing_refine_by": "coalescingRefineBy",
        "operator": "operator",
        "list_id": "listId",
        "to_object_type_id": "toObjectTypeId",
        "property_with_object_id": "propertyWithObjectId",
    }

    def __init__(
        self, filter_type="PROPERTY_ASSOCIATION", coalescing_refine_by=None, operator=None, list_id=None, to_object_type_id=None, property_with_object_id=None, local_vars_configuration=None
    ):  # noqa: E501
        """PublicPropertyAssociationInListFilter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._filter_type = None
        self._coalescing_refine_by = None
        self._operator = None
        self._list_id = None
        self._to_object_type_id = None
        self._property_with_object_id = None
        self.discriminator = None

        self.filter_type = filter_type
        self.coalescing_refine_by = coalescing_refine_by
        self.operator = operator
        self.list_id = list_id
        if to_object_type_id is not None:
            self.to_object_type_id = to_object_type_id
        self.property_with_object_id = property_with_object_id

    @property
    def filter_type(self):
        """Gets the filter_type of this PublicPropertyAssociationInListFilter.  # noqa: E501


        :return: The filter_type of this PublicPropertyAssociationInListFilter.  # noqa: E501
        :rtype: str
        """
        return self._filter_type

    @filter_type.setter
    def filter_type(self, filter_type):
        """Sets the filter_type of this PublicPropertyAssociationInListFilter.


        :param filter_type: The filter_type of this PublicPropertyAssociationInListFilter.  # noqa: E501
        :type filter_type: str
        """
        if self.local_vars_configuration.client_side_validation and filter_type is None:  # noqa: E501
            raise ValueError("Invalid value for `filter_type`, must not be `None`")  # noqa: E501
        allowed_values = ["PROPERTY_ASSOCIATION"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and filter_type not in allowed_values:  # noqa: E501
            raise ValueError("Invalid value for `filter_type` ({0}), must be one of {1}".format(filter_type, allowed_values))  # noqa: E501

        self._filter_type = filter_type

    @property
    def coalescing_refine_by(self):
        """Gets the coalescing_refine_by of this PublicPropertyAssociationInListFilter.  # noqa: E501


        :return: The coalescing_refine_by of this PublicPropertyAssociationInListFilter.  # noqa: E501
        :rtype: PublicEventAnalyticsFilterCoalescingRefineBy
        """
        return self._coalescing_refine_by

    @coalescing_refine_by.setter
    def coalescing_refine_by(self, coalescing_refine_by):
        """Sets the coalescing_refine_by of this PublicPropertyAssociationInListFilter.


        :param coalescing_refine_by: The coalescing_refine_by of this PublicPropertyAssociationInListFilter.  # noqa: E501
        :type coalescing_refine_by: PublicEventAnalyticsFilterCoalescingRefineBy
        """
        if self.local_vars_configuration.client_side_validation and coalescing_refine_by is None:  # noqa: E501
            raise ValueError("Invalid value for `coalescing_refine_by`, must not be `None`")  # noqa: E501

        self._coalescing_refine_by = coalescing_refine_by

    @property
    def operator(self):
        """Gets the operator of this PublicPropertyAssociationInListFilter.  # noqa: E501


        :return: The operator of this PublicPropertyAssociationInListFilter.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this PublicPropertyAssociationInListFilter.


        :param operator: The operator of this PublicPropertyAssociationInListFilter.  # noqa: E501
        :type operator: str
        """
        if self.local_vars_configuration.client_side_validation and operator is None:  # noqa: E501
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501

        self._operator = operator

    @property
    def list_id(self):
        """Gets the list_id of this PublicPropertyAssociationInListFilter.  # noqa: E501


        :return: The list_id of this PublicPropertyAssociationInListFilter.  # noqa: E501
        :rtype: int
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this PublicPropertyAssociationInListFilter.


        :param list_id: The list_id of this PublicPropertyAssociationInListFilter.  # noqa: E501
        :type list_id: int
        """
        if self.local_vars_configuration.client_side_validation and list_id is None:  # noqa: E501
            raise ValueError("Invalid value for `list_id`, must not be `None`")  # noqa: E501

        self._list_id = list_id

    @property
    def to_object_type_id(self):
        """Gets the to_object_type_id of this PublicPropertyAssociationInListFilter.  # noqa: E501


        :return: The to_object_type_id of this PublicPropertyAssociationInListFilter.  # noqa: E501
        :rtype: str
        """
        return self._to_object_type_id

    @to_object_type_id.setter
    def to_object_type_id(self, to_object_type_id):
        """Sets the to_object_type_id of this PublicPropertyAssociationInListFilter.


        :param to_object_type_id: The to_object_type_id of this PublicPropertyAssociationInListFilter.  # noqa: E501
        :type to_object_type_id: str
        """

        self._to_object_type_id = to_object_type_id

    @property
    def property_with_object_id(self):
        """Gets the property_with_object_id of this PublicPropertyAssociationInListFilter.  # noqa: E501


        :return: The property_with_object_id of this PublicPropertyAssociationInListFilter.  # noqa: E501
        :rtype: str
        """
        return self._property_with_object_id

    @property_with_object_id.setter
    def property_with_object_id(self, property_with_object_id):
        """Sets the property_with_object_id of this PublicPropertyAssociationInListFilter.


        :param property_with_object_id: The property_with_object_id of this PublicPropertyAssociationInListFilter.  # noqa: E501
        :type property_with_object_id: str
        """
        if self.local_vars_configuration.client_side_validation and property_with_object_id is None:  # noqa: E501
            raise ValueError("Invalid value for `property_with_object_id`, must not be `None`")  # noqa: E501

        self._property_with_object_id = property_with_object_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicPropertyAssociationInListFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicPropertyAssociationInListFilter):
            return True

        return self.to_dict() != other.to_dict()
