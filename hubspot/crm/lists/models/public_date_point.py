# coding: utf-8

"""
    Lists

    CRUD operations to manage lists and list memberships  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.crm.lists.configuration import Configuration


class PublicDatePoint(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"time_type": "str", "timezone_source": "str", "zone_id": "str", "year": "int", "month": "int", "day": "int", "hour": "int", "minute": "int", "second": "int", "millisecond": "int"}

    attribute_map = {
        "time_type": "timeType",
        "timezone_source": "timezoneSource",
        "zone_id": "zoneId",
        "year": "year",
        "month": "month",
        "day": "day",
        "hour": "hour",
        "minute": "minute",
        "second": "second",
        "millisecond": "millisecond",
    }

    def __init__(
        self, time_type="DATE", timezone_source=None, zone_id=None, year=None, month=None, day=None, hour=None, minute=None, second=None, millisecond=None, local_vars_configuration=None
    ):  # noqa: E501
        """PublicDatePoint - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._time_type = None
        self._timezone_source = None
        self._zone_id = None
        self._year = None
        self._month = None
        self._day = None
        self._hour = None
        self._minute = None
        self._second = None
        self._millisecond = None
        self.discriminator = None

        self.time_type = time_type
        if timezone_source is not None:
            self.timezone_source = timezone_source
        self.zone_id = zone_id
        self.year = year
        self.month = month
        self.day = day
        if hour is not None:
            self.hour = hour
        if minute is not None:
            self.minute = minute
        if second is not None:
            self.second = second
        if millisecond is not None:
            self.millisecond = millisecond

    @property
    def time_type(self):
        """Gets the time_type of this PublicDatePoint.  # noqa: E501


        :return: The time_type of this PublicDatePoint.  # noqa: E501
        :rtype: str
        """
        return self._time_type

    @time_type.setter
    def time_type(self, time_type):
        """Sets the time_type of this PublicDatePoint.


        :param time_type: The time_type of this PublicDatePoint.  # noqa: E501
        :type time_type: str
        """
        if self.local_vars_configuration.client_side_validation and time_type is None:  # noqa: E501
            raise ValueError("Invalid value for `time_type`, must not be `None`")  # noqa: E501
        allowed_values = ["DATE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and time_type not in allowed_values:  # noqa: E501
            raise ValueError("Invalid value for `time_type` ({0}), must be one of {1}".format(time_type, allowed_values))  # noqa: E501

        self._time_type = time_type

    @property
    def timezone_source(self):
        """Gets the timezone_source of this PublicDatePoint.  # noqa: E501


        :return: The timezone_source of this PublicDatePoint.  # noqa: E501
        :rtype: str
        """
        return self._timezone_source

    @timezone_source.setter
    def timezone_source(self, timezone_source):
        """Sets the timezone_source of this PublicDatePoint.


        :param timezone_source: The timezone_source of this PublicDatePoint.  # noqa: E501
        :type timezone_source: str
        """

        self._timezone_source = timezone_source

    @property
    def zone_id(self):
        """Gets the zone_id of this PublicDatePoint.  # noqa: E501


        :return: The zone_id of this PublicDatePoint.  # noqa: E501
        :rtype: str
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id):
        """Sets the zone_id of this PublicDatePoint.


        :param zone_id: The zone_id of this PublicDatePoint.  # noqa: E501
        :type zone_id: str
        """
        if self.local_vars_configuration.client_side_validation and zone_id is None:  # noqa: E501
            raise ValueError("Invalid value for `zone_id`, must not be `None`")  # noqa: E501

        self._zone_id = zone_id

    @property
    def year(self):
        """Gets the year of this PublicDatePoint.  # noqa: E501


        :return: The year of this PublicDatePoint.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this PublicDatePoint.


        :param year: The year of this PublicDatePoint.  # noqa: E501
        :type year: int
        """
        if self.local_vars_configuration.client_side_validation and year is None:  # noqa: E501
            raise ValueError("Invalid value for `year`, must not be `None`")  # noqa: E501

        self._year = year

    @property
    def month(self):
        """Gets the month of this PublicDatePoint.  # noqa: E501


        :return: The month of this PublicDatePoint.  # noqa: E501
        :rtype: int
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this PublicDatePoint.


        :param month: The month of this PublicDatePoint.  # noqa: E501
        :type month: int
        """
        if self.local_vars_configuration.client_side_validation and month is None:  # noqa: E501
            raise ValueError("Invalid value for `month`, must not be `None`")  # noqa: E501

        self._month = month

    @property
    def day(self):
        """Gets the day of this PublicDatePoint.  # noqa: E501


        :return: The day of this PublicDatePoint.  # noqa: E501
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this PublicDatePoint.


        :param day: The day of this PublicDatePoint.  # noqa: E501
        :type day: int
        """
        if self.local_vars_configuration.client_side_validation and day is None:  # noqa: E501
            raise ValueError("Invalid value for `day`, must not be `None`")  # noqa: E501

        self._day = day

    @property
    def hour(self):
        """Gets the hour of this PublicDatePoint.  # noqa: E501


        :return: The hour of this PublicDatePoint.  # noqa: E501
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this PublicDatePoint.


        :param hour: The hour of this PublicDatePoint.  # noqa: E501
        :type hour: int
        """

        self._hour = hour

    @property
    def minute(self):
        """Gets the minute of this PublicDatePoint.  # noqa: E501


        :return: The minute of this PublicDatePoint.  # noqa: E501
        :rtype: int
        """
        return self._minute

    @minute.setter
    def minute(self, minute):
        """Sets the minute of this PublicDatePoint.


        :param minute: The minute of this PublicDatePoint.  # noqa: E501
        :type minute: int
        """

        self._minute = minute

    @property
    def second(self):
        """Gets the second of this PublicDatePoint.  # noqa: E501


        :return: The second of this PublicDatePoint.  # noqa: E501
        :rtype: int
        """
        return self._second

    @second.setter
    def second(self, second):
        """Sets the second of this PublicDatePoint.


        :param second: The second of this PublicDatePoint.  # noqa: E501
        :type second: int
        """

        self._second = second

    @property
    def millisecond(self):
        """Gets the millisecond of this PublicDatePoint.  # noqa: E501


        :return: The millisecond of this PublicDatePoint.  # noqa: E501
        :rtype: int
        """
        return self._millisecond

    @millisecond.setter
    def millisecond(self, millisecond):
        """Sets the millisecond of this PublicDatePoint.


        :param millisecond: The millisecond of this PublicDatePoint.  # noqa: E501
        :type millisecond: int
        """

        self._millisecond = millisecond

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicDatePoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicDatePoint):
            return True

        return self.to_dict() != other.to_dict()
