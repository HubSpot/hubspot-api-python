# coding: utf-8

"""
    Lists

    CRUD operations to manage lists and list memberships  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.crm.lists.configuration import Configuration


class PublicCalendarDatePropertyOperation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "operation_type": "str",
        "operator": "str",
        "include_objects_with_no_value_set": "bool",
        "time_unit": "str",
        "fiscal_year_start": "str",
        "use_fiscal_year": "bool",
        "time_unit_count": "int",
    }

    attribute_map = {
        "operation_type": "operationType",
        "operator": "operator",
        "include_objects_with_no_value_set": "includeObjectsWithNoValueSet",
        "time_unit": "timeUnit",
        "fiscal_year_start": "fiscalYearStart",
        "use_fiscal_year": "useFiscalYear",
        "time_unit_count": "timeUnitCount",
    }

    def __init__(
        self,
        operation_type="CALENDAR_DATE",
        operator=None,
        include_objects_with_no_value_set=None,
        time_unit=None,
        fiscal_year_start=None,
        use_fiscal_year=None,
        time_unit_count=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """PublicCalendarDatePropertyOperation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._operation_type = None
        self._operator = None
        self._include_objects_with_no_value_set = None
        self._time_unit = None
        self._fiscal_year_start = None
        self._use_fiscal_year = None
        self._time_unit_count = None
        self.discriminator = None

        self.operation_type = operation_type
        self.operator = operator
        self.include_objects_with_no_value_set = include_objects_with_no_value_set
        self.time_unit = time_unit
        if fiscal_year_start is not None:
            self.fiscal_year_start = fiscal_year_start
        if use_fiscal_year is not None:
            self.use_fiscal_year = use_fiscal_year
        if time_unit_count is not None:
            self.time_unit_count = time_unit_count

    @property
    def operation_type(self):
        """Gets the operation_type of this PublicCalendarDatePropertyOperation.  # noqa: E501


        :return: The operation_type of this PublicCalendarDatePropertyOperation.  # noqa: E501
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this PublicCalendarDatePropertyOperation.


        :param operation_type: The operation_type of this PublicCalendarDatePropertyOperation.  # noqa: E501
        :type operation_type: str
        """
        if self.local_vars_configuration.client_side_validation and operation_type is None:  # noqa: E501
            raise ValueError("Invalid value for `operation_type`, must not be `None`")  # noqa: E501
        allowed_values = ["CALENDAR_DATE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and operation_type not in allowed_values:  # noqa: E501
            raise ValueError("Invalid value for `operation_type` ({0}), must be one of {1}".format(operation_type, allowed_values))  # noqa: E501

        self._operation_type = operation_type

    @property
    def operator(self):
        """Gets the operator of this PublicCalendarDatePropertyOperation.  # noqa: E501


        :return: The operator of this PublicCalendarDatePropertyOperation.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this PublicCalendarDatePropertyOperation.


        :param operator: The operator of this PublicCalendarDatePropertyOperation.  # noqa: E501
        :type operator: str
        """
        if self.local_vars_configuration.client_side_validation and operator is None:  # noqa: E501
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501

        self._operator = operator

    @property
    def include_objects_with_no_value_set(self):
        """Gets the include_objects_with_no_value_set of this PublicCalendarDatePropertyOperation.  # noqa: E501


        :return: The include_objects_with_no_value_set of this PublicCalendarDatePropertyOperation.  # noqa: E501
        :rtype: bool
        """
        return self._include_objects_with_no_value_set

    @include_objects_with_no_value_set.setter
    def include_objects_with_no_value_set(self, include_objects_with_no_value_set):
        """Sets the include_objects_with_no_value_set of this PublicCalendarDatePropertyOperation.


        :param include_objects_with_no_value_set: The include_objects_with_no_value_set of this PublicCalendarDatePropertyOperation.  # noqa: E501
        :type include_objects_with_no_value_set: bool
        """
        if self.local_vars_configuration.client_side_validation and include_objects_with_no_value_set is None:  # noqa: E501
            raise ValueError("Invalid value for `include_objects_with_no_value_set`, must not be `None`")  # noqa: E501

        self._include_objects_with_no_value_set = include_objects_with_no_value_set

    @property
    def time_unit(self):
        """Gets the time_unit of this PublicCalendarDatePropertyOperation.  # noqa: E501


        :return: The time_unit of this PublicCalendarDatePropertyOperation.  # noqa: E501
        :rtype: str
        """
        return self._time_unit

    @time_unit.setter
    def time_unit(self, time_unit):
        """Sets the time_unit of this PublicCalendarDatePropertyOperation.


        :param time_unit: The time_unit of this PublicCalendarDatePropertyOperation.  # noqa: E501
        :type time_unit: str
        """
        if self.local_vars_configuration.client_side_validation and time_unit is None:  # noqa: E501
            raise ValueError("Invalid value for `time_unit`, must not be `None`")  # noqa: E501

        self._time_unit = time_unit

    @property
    def fiscal_year_start(self):
        """Gets the fiscal_year_start of this PublicCalendarDatePropertyOperation.  # noqa: E501


        :return: The fiscal_year_start of this PublicCalendarDatePropertyOperation.  # noqa: E501
        :rtype: str
        """
        return self._fiscal_year_start

    @fiscal_year_start.setter
    def fiscal_year_start(self, fiscal_year_start):
        """Sets the fiscal_year_start of this PublicCalendarDatePropertyOperation.


        :param fiscal_year_start: The fiscal_year_start of this PublicCalendarDatePropertyOperation.  # noqa: E501
        :type fiscal_year_start: str
        """
        allowed_values = ["JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and fiscal_year_start not in allowed_values:  # noqa: E501
            raise ValueError("Invalid value for `fiscal_year_start` ({0}), must be one of {1}".format(fiscal_year_start, allowed_values))  # noqa: E501

        self._fiscal_year_start = fiscal_year_start

    @property
    def use_fiscal_year(self):
        """Gets the use_fiscal_year of this PublicCalendarDatePropertyOperation.  # noqa: E501


        :return: The use_fiscal_year of this PublicCalendarDatePropertyOperation.  # noqa: E501
        :rtype: bool
        """
        return self._use_fiscal_year

    @use_fiscal_year.setter
    def use_fiscal_year(self, use_fiscal_year):
        """Sets the use_fiscal_year of this PublicCalendarDatePropertyOperation.


        :param use_fiscal_year: The use_fiscal_year of this PublicCalendarDatePropertyOperation.  # noqa: E501
        :type use_fiscal_year: bool
        """

        self._use_fiscal_year = use_fiscal_year

    @property
    def time_unit_count(self):
        """Gets the time_unit_count of this PublicCalendarDatePropertyOperation.  # noqa: E501


        :return: The time_unit_count of this PublicCalendarDatePropertyOperation.  # noqa: E501
        :rtype: int
        """
        return self._time_unit_count

    @time_unit_count.setter
    def time_unit_count(self, time_unit_count):
        """Sets the time_unit_count of this PublicCalendarDatePropertyOperation.


        :param time_unit_count: The time_unit_count of this PublicCalendarDatePropertyOperation.  # noqa: E501
        :type time_unit_count: int
        """

        self._time_unit_count = time_unit_count

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicCalendarDatePropertyOperation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicCalendarDatePropertyOperation):
            return True

        return self.to_dict() != other.to_dict()
