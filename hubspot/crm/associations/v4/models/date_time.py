# coding: utf-8

"""
    CRM Associations

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v4
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.crm.associations.v4.configuration import Configuration


class DateTime(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"date_only": "bool", "time_zone_shift": "int", "value": "int"}

    attribute_map = {"date_only": "dateOnly", "time_zone_shift": "timeZoneShift", "value": "value"}

    def __init__(self, date_only=None, time_zone_shift=None, value=None, local_vars_configuration=None):  # noqa: E501
        """DateTime - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._date_only = None
        self._time_zone_shift = None
        self._value = None
        self.discriminator = None

        self.date_only = date_only
        self.time_zone_shift = time_zone_shift
        self.value = value

    @property
    def date_only(self):
        """Gets the date_only of this DateTime.  # noqa: E501


        :return: The date_only of this DateTime.  # noqa: E501
        :rtype: bool
        """
        return self._date_only

    @date_only.setter
    def date_only(self, date_only):
        """Sets the date_only of this DateTime.


        :param date_only: The date_only of this DateTime.  # noqa: E501
        :type date_only: bool
        """
        if self.local_vars_configuration.client_side_validation and date_only is None:  # noqa: E501
            raise ValueError("Invalid value for `date_only`, must not be `None`")  # noqa: E501

        self._date_only = date_only

    @property
    def time_zone_shift(self):
        """Gets the time_zone_shift of this DateTime.  # noqa: E501


        :return: The time_zone_shift of this DateTime.  # noqa: E501
        :rtype: int
        """
        return self._time_zone_shift

    @time_zone_shift.setter
    def time_zone_shift(self, time_zone_shift):
        """Sets the time_zone_shift of this DateTime.


        :param time_zone_shift: The time_zone_shift of this DateTime.  # noqa: E501
        :type time_zone_shift: int
        """
        if self.local_vars_configuration.client_side_validation and time_zone_shift is None:  # noqa: E501
            raise ValueError("Invalid value for `time_zone_shift`, must not be `None`")  # noqa: E501

        self._time_zone_shift = time_zone_shift

    @property
    def value(self):
        """Gets the value of this DateTime.  # noqa: E501


        :return: The value of this DateTime.  # noqa: E501
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DateTime.


        :param value: The value of this DateTime.  # noqa: E501
        :type value: int
        """
        if self.local_vars_configuration.client_side_validation and value is None:  # noqa: E501
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DateTime):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DateTime):
            return True

        return self.to_dict() != other.to_dict()
