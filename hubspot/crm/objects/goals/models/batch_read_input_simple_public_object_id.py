# coding: utf-8

"""
    Goal Targets

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.crm.objects.goals.configuration import Configuration


class BatchReadInputSimplePublicObjectId(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"properties_with_history": "list[str]", "id_property": "str", "inputs": "list[SimplePublicObjectId]", "properties": "list[str]"}

    attribute_map = {"properties_with_history": "propertiesWithHistory", "id_property": "idProperty", "inputs": "inputs", "properties": "properties"}

    def __init__(self, properties_with_history=None, id_property=None, inputs=None, properties=None, local_vars_configuration=None):  # noqa: E501
        """BatchReadInputSimplePublicObjectId - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._properties_with_history = None
        self._id_property = None
        self._inputs = None
        self._properties = None
        self.discriminator = None

        self.properties_with_history = properties_with_history
        if id_property is not None:
            self.id_property = id_property
        self.inputs = inputs
        self.properties = properties

    @property
    def properties_with_history(self):
        """Gets the properties_with_history of this BatchReadInputSimplePublicObjectId.  # noqa: E501


        :return: The properties_with_history of this BatchReadInputSimplePublicObjectId.  # noqa: E501
        :rtype: list[str]
        """
        return self._properties_with_history

    @properties_with_history.setter
    def properties_with_history(self, properties_with_history):
        """Sets the properties_with_history of this BatchReadInputSimplePublicObjectId.


        :param properties_with_history: The properties_with_history of this BatchReadInputSimplePublicObjectId.  # noqa: E501
        :type properties_with_history: list[str]
        """
        if self.local_vars_configuration.client_side_validation and properties_with_history is None:  # noqa: E501
            raise ValueError("Invalid value for `properties_with_history`, must not be `None`")  # noqa: E501

        self._properties_with_history = properties_with_history

    @property
    def id_property(self):
        """Gets the id_property of this BatchReadInputSimplePublicObjectId.  # noqa: E501


        :return: The id_property of this BatchReadInputSimplePublicObjectId.  # noqa: E501
        :rtype: str
        """
        return self._id_property

    @id_property.setter
    def id_property(self, id_property):
        """Sets the id_property of this BatchReadInputSimplePublicObjectId.


        :param id_property: The id_property of this BatchReadInputSimplePublicObjectId.  # noqa: E501
        :type id_property: str
        """

        self._id_property = id_property

    @property
    def inputs(self):
        """Gets the inputs of this BatchReadInputSimplePublicObjectId.  # noqa: E501


        :return: The inputs of this BatchReadInputSimplePublicObjectId.  # noqa: E501
        :rtype: list[SimplePublicObjectId]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this BatchReadInputSimplePublicObjectId.


        :param inputs: The inputs of this BatchReadInputSimplePublicObjectId.  # noqa: E501
        :type inputs: list[SimplePublicObjectId]
        """
        if self.local_vars_configuration.client_side_validation and inputs is None:  # noqa: E501
            raise ValueError("Invalid value for `inputs`, must not be `None`")  # noqa: E501

        self._inputs = inputs

    @property
    def properties(self):
        """Gets the properties of this BatchReadInputSimplePublicObjectId.  # noqa: E501


        :return: The properties of this BatchReadInputSimplePublicObjectId.  # noqa: E501
        :rtype: list[str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this BatchReadInputSimplePublicObjectId.


        :param properties: The properties of this BatchReadInputSimplePublicObjectId.  # noqa: E501
        :type properties: list[str]
        """
        if self.local_vars_configuration.client_side_validation and properties is None:  # noqa: E501
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BatchReadInputSimplePublicObjectId):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BatchReadInputSimplePublicObjectId):
            return True

        return self.to_dict() != other.to_dict()
