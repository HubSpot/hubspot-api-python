# coding: utf-8

"""
    Events Send Event Completions

    HTTP API for triggering instances of custom behavioral events  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.events.send.configuration import Configuration


class BehavioralEventHttpCompletionRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"occurred_at": "datetime", "event_name": "str", "utk": "str", "uuid": "str", "email": "str", "properties": "dict[str, str]", "object_id": "str"}

    attribute_map = {"occurred_at": "occurredAt", "event_name": "eventName", "utk": "utk", "uuid": "uuid", "email": "email", "properties": "properties", "object_id": "objectId"}

    def __init__(self, occurred_at=None, event_name=None, utk=None, uuid=None, email=None, properties=None, object_id=None, local_vars_configuration=None):  # noqa: E501
        """BehavioralEventHttpCompletionRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._occurred_at = None
        self._event_name = None
        self._utk = None
        self._uuid = None
        self._email = None
        self._properties = None
        self._object_id = None
        self.discriminator = None

        if occurred_at is not None:
            self.occurred_at = occurred_at
        self.event_name = event_name
        if utk is not None:
            self.utk = utk
        if uuid is not None:
            self.uuid = uuid
        if email is not None:
            self.email = email
        if properties is not None:
            self.properties = properties
        if object_id is not None:
            self.object_id = object_id

    @property
    def occurred_at(self):
        """Gets the occurred_at of this BehavioralEventHttpCompletionRequest.  # noqa: E501

        The time when this event occurred (if any). If this isn't set, the current time will be used  # noqa: E501

        :return: The occurred_at of this BehavioralEventHttpCompletionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._occurred_at

    @occurred_at.setter
    def occurred_at(self, occurred_at):
        """Sets the occurred_at of this BehavioralEventHttpCompletionRequest.

        The time when this event occurred (if any). If this isn't set, the current time will be used  # noqa: E501

        :param occurred_at: The occurred_at of this BehavioralEventHttpCompletionRequest.  # noqa: E501
        :type occurred_at: datetime
        """

        self._occurred_at = occurred_at

    @property
    def event_name(self):
        """Gets the event_name of this BehavioralEventHttpCompletionRequest.  # noqa: E501

        Internal name of the event-type to trigger  # noqa: E501

        :return: The event_name of this BehavioralEventHttpCompletionRequest.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this BehavioralEventHttpCompletionRequest.

        Internal name of the event-type to trigger  # noqa: E501

        :param event_name: The event_name of this BehavioralEventHttpCompletionRequest.  # noqa: E501
        :type event_name: str
        """
        if self.local_vars_configuration.client_side_validation and event_name is None:  # noqa: E501
            raise ValueError("Invalid value for `event_name`, must not be `None`")  # noqa: E501

        self._event_name = event_name

    @property
    def utk(self):
        """Gets the utk of this BehavioralEventHttpCompletionRequest.  # noqa: E501

        User token  # noqa: E501

        :return: The utk of this BehavioralEventHttpCompletionRequest.  # noqa: E501
        :rtype: str
        """
        return self._utk

    @utk.setter
    def utk(self, utk):
        """Sets the utk of this BehavioralEventHttpCompletionRequest.

        User token  # noqa: E501

        :param utk: The utk of this BehavioralEventHttpCompletionRequest.  # noqa: E501
        :type utk: str
        """

        self._utk = utk

    @property
    def uuid(self):
        """Gets the uuid of this BehavioralEventHttpCompletionRequest.  # noqa: E501


        :return: The uuid of this BehavioralEventHttpCompletionRequest.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this BehavioralEventHttpCompletionRequest.


        :param uuid: The uuid of this BehavioralEventHttpCompletionRequest.  # noqa: E501
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def email(self):
        """Gets the email of this BehavioralEventHttpCompletionRequest.  # noqa: E501

        Email of visitor  # noqa: E501

        :return: The email of this BehavioralEventHttpCompletionRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this BehavioralEventHttpCompletionRequest.

        Email of visitor  # noqa: E501

        :param email: The email of this BehavioralEventHttpCompletionRequest.  # noqa: E501
        :type email: str
        """

        self._email = email

    @property
    def properties(self):
        """Gets the properties of this BehavioralEventHttpCompletionRequest.  # noqa: E501

        Map of properties for the event in the format property internal name - property value  # noqa: E501

        :return: The properties of this BehavioralEventHttpCompletionRequest.  # noqa: E501
        :rtype: dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this BehavioralEventHttpCompletionRequest.

        Map of properties for the event in the format property internal name - property value  # noqa: E501

        :param properties: The properties of this BehavioralEventHttpCompletionRequest.  # noqa: E501
        :type properties: dict[str, str]
        """

        self._properties = properties

    @property
    def object_id(self):
        """Gets the object_id of this BehavioralEventHttpCompletionRequest.  # noqa: E501

        The object id that this event occurred on. Could be a contact id or a visitor id.  # noqa: E501

        :return: The object_id of this BehavioralEventHttpCompletionRequest.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this BehavioralEventHttpCompletionRequest.

        The object id that this event occurred on. Could be a contact id or a visitor id.  # noqa: E501

        :param object_id: The object_id of this BehavioralEventHttpCompletionRequest.  # noqa: E501
        :type object_id: str
        """

        self._object_id = object_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BehavioralEventHttpCompletionRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BehavioralEventHttpCompletionRequest):
            return True

        return self.to_dict() != other.to_dict()
