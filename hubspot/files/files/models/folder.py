# coding: utf-8

"""
    Files

    Upload and manage files.  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from hubspot.files.files.configuration import Configuration


class Folder(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'created_at': 'datetime',
        'archived_at': 'datetime',
        'updated_at': 'datetime',
        'archived': 'bool',
        'parent_folder_id': 'str',
        'name': 'str',
        'path': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'createdAt',
        'archived_at': 'archivedAt',
        'updated_at': 'updatedAt',
        'archived': 'archived',
        'parent_folder_id': 'parentFolderId',
        'name': 'name',
        'path': 'path'
    }

    def __init__(self, id=None, created_at=None, archived_at=None, updated_at=None, archived=None, parent_folder_id=None, name=None, path=None, local_vars_configuration=None):  # noqa: E501
        """Folder - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created_at = None
        self._archived_at = None
        self._updated_at = None
        self._archived = None
        self._parent_folder_id = None
        self._name = None
        self._path = None
        self.discriminator = None

        self.id = id
        self.created_at = created_at
        if archived_at is not None:
            self.archived_at = archived_at
        self.updated_at = updated_at
        self.archived = archived
        if parent_folder_id is not None:
            self.parent_folder_id = parent_folder_id
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path

    @property
    def id(self):
        """Gets the id of this Folder.  # noqa: E501

        Id of the folder.  # noqa: E501

        :return: The id of this Folder.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Folder.

        Id of the folder.  # noqa: E501

        :param id: The id of this Folder.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Folder.  # noqa: E501

        Timestamp of folder creation.  # noqa: E501

        :return: The created_at of this Folder.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Folder.

        Timestamp of folder creation.  # noqa: E501

        :param created_at: The created_at of this Folder.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def archived_at(self):
        """Gets the archived_at of this Folder.  # noqa: E501

        Timestamp of folder deletion.  # noqa: E501

        :return: The archived_at of this Folder.  # noqa: E501
        :rtype: datetime
        """
        return self._archived_at

    @archived_at.setter
    def archived_at(self, archived_at):
        """Sets the archived_at of this Folder.

        Timestamp of folder deletion.  # noqa: E501

        :param archived_at: The archived_at of this Folder.  # noqa: E501
        :type: datetime
        """

        self._archived_at = archived_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Folder.  # noqa: E501

        Timestamp of the latest update to the folder.  # noqa: E501

        :return: The updated_at of this Folder.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Folder.

        Timestamp of the latest update to the folder.  # noqa: E501

        :param updated_at: The updated_at of this Folder.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def archived(self):
        """Gets the archived of this Folder.  # noqa: E501

        Marks weather the folder is deleted or not.  # noqa: E501

        :return: The archived of this Folder.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Folder.

        Marks weather the folder is deleted or not.  # noqa: E501

        :param archived: The archived of this Folder.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and archived is None:  # noqa: E501
            raise ValueError("Invalid value for `archived`, must not be `None`")  # noqa: E501

        self._archived = archived

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this Folder.  # noqa: E501

        Id of the parent folder.  # noqa: E501

        :return: The parent_folder_id of this Folder.  # noqa: E501
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this Folder.

        Id of the parent folder.  # noqa: E501

        :param parent_folder_id: The parent_folder_id of this Folder.  # noqa: E501
        :type: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def name(self):
        """Gets the name of this Folder.  # noqa: E501

        Name of the folder.  # noqa: E501

        :return: The name of this Folder.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Folder.

        Name of the folder.  # noqa: E501

        :param name: The name of this Folder.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this Folder.  # noqa: E501

        Path of the folder in the file manager.  # noqa: E501

        :return: The path of this Folder.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Folder.

        Path of the folder in the file manager.  # noqa: E501

        :param path: The path of this Folder.  # noqa: E501
        :type: str
        """

        self._path = path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Folder):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Folder):
            return True

        return self.to_dict() != other.to_dict()
