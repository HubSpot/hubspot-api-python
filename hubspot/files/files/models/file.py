# coding: utf-8

"""
    Files

    Upload and manage files.  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from hubspot.files.files.configuration import Configuration


class File(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'created_at': 'datetime',
        'archived_at': 'datetime',
        'updated_at': 'datetime',
        'archived': 'bool',
        'parent_folder_id': 'str',
        'name': 'str',
        'path': 'str',
        'size': 'int',
        'height': 'int',
        'width': 'int',
        'encoding': 'str',
        'type': 'str',
        'extension': 'str',
        'default_hosting_url': 'str',
        'url': 'str',
        'is_usable_in_content': 'bool',
        'access': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_at': 'createdAt',
        'archived_at': 'archivedAt',
        'updated_at': 'updatedAt',
        'archived': 'archived',
        'parent_folder_id': 'parentFolderId',
        'name': 'name',
        'path': 'path',
        'size': 'size',
        'height': 'height',
        'width': 'width',
        'encoding': 'encoding',
        'type': 'type',
        'extension': 'extension',
        'default_hosting_url': 'defaultHostingUrl',
        'url': 'url',
        'is_usable_in_content': 'isUsableInContent',
        'access': 'access'
    }

    def __init__(self, id=None, created_at=None, archived_at=None, updated_at=None, archived=None, parent_folder_id=None, name=None, path=None, size=None, height=None, width=None, encoding=None, type=None, extension=None, default_hosting_url=None, url=None, is_usable_in_content=None, access=None, local_vars_configuration=None):  # noqa: E501
        """File - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created_at = None
        self._archived_at = None
        self._updated_at = None
        self._archived = None
        self._parent_folder_id = None
        self._name = None
        self._path = None
        self._size = None
        self._height = None
        self._width = None
        self._encoding = None
        self._type = None
        self._extension = None
        self._default_hosting_url = None
        self._url = None
        self._is_usable_in_content = None
        self._access = None
        self.discriminator = None

        self.id = id
        self.created_at = created_at
        if archived_at is not None:
            self.archived_at = archived_at
        self.updated_at = updated_at
        self.archived = archived
        if parent_folder_id is not None:
            self.parent_folder_id = parent_folder_id
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if size is not None:
            self.size = size
        if height is not None:
            self.height = height
        if width is not None:
            self.width = width
        if encoding is not None:
            self.encoding = encoding
        if type is not None:
            self.type = type
        if extension is not None:
            self.extension = extension
        if default_hosting_url is not None:
            self.default_hosting_url = default_hosting_url
        if url is not None:
            self.url = url
        if is_usable_in_content is not None:
            self.is_usable_in_content = is_usable_in_content
        self.access = access

    @property
    def id(self):
        """Gets the id of this File.  # noqa: E501

        File ID.  # noqa: E501

        :return: The id of this File.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this File.

        File ID.  # noqa: E501

        :param id: The id of this File.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this File.  # noqa: E501

        Creation time of the file object.  # noqa: E501

        :return: The created_at of this File.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this File.

        Creation time of the file object.  # noqa: E501

        :param created_at: The created_at of this File.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def archived_at(self):
        """Gets the archived_at of this File.  # noqa: E501

        Deletion time of the file object.  # noqa: E501

        :return: The archived_at of this File.  # noqa: E501
        :rtype: datetime
        """
        return self._archived_at

    @archived_at.setter
    def archived_at(self, archived_at):
        """Sets the archived_at of this File.

        Deletion time of the file object.  # noqa: E501

        :param archived_at: The archived_at of this File.  # noqa: E501
        :type: datetime
        """

        self._archived_at = archived_at

    @property
    def updated_at(self):
        """Gets the updated_at of this File.  # noqa: E501

        Timestamp of the latest update to the file.  # noqa: E501

        :return: The updated_at of this File.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this File.

        Timestamp of the latest update to the file.  # noqa: E501

        :param updated_at: The updated_at of this File.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_at is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def archived(self):
        """Gets the archived of this File.  # noqa: E501

        If the file is deleted.  # noqa: E501

        :return: The archived of this File.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this File.

        If the file is deleted.  # noqa: E501

        :param archived: The archived of this File.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and archived is None:  # noqa: E501
            raise ValueError("Invalid value for `archived`, must not be `None`")  # noqa: E501

        self._archived = archived

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this File.  # noqa: E501

        Id of the folder the file is in.  # noqa: E501

        :return: The parent_folder_id of this File.  # noqa: E501
        :rtype: str
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this File.

        Id of the folder the file is in.  # noqa: E501

        :param parent_folder_id: The parent_folder_id of this File.  # noqa: E501
        :type: str
        """

        self._parent_folder_id = parent_folder_id

    @property
    def name(self):
        """Gets the name of this File.  # noqa: E501

        Name of the file.  # noqa: E501

        :return: The name of this File.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this File.

        Name of the file.  # noqa: E501

        :param name: The name of this File.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this File.  # noqa: E501

        Path of the file in the file manager.  # noqa: E501

        :return: The path of this File.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this File.

        Path of the file in the file manager.  # noqa: E501

        :param path: The path of this File.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def size(self):
        """Gets the size of this File.  # noqa: E501

        Size in bytes of the file.  # noqa: E501

        :return: The size of this File.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this File.

        Size in bytes of the file.  # noqa: E501

        :param size: The size of this File.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def height(self):
        """Gets the height of this File.  # noqa: E501

        For image and video files, the height of the content.  # noqa: E501

        :return: The height of this File.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this File.

        For image and video files, the height of the content.  # noqa: E501

        :param height: The height of this File.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def width(self):
        """Gets the width of this File.  # noqa: E501

        For image and video files, the width of the content.  # noqa: E501

        :return: The width of this File.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this File.

        For image and video files, the width of the content.  # noqa: E501

        :param width: The width of this File.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def encoding(self):
        """Gets the encoding of this File.  # noqa: E501

        Encoding of the file.  # noqa: E501

        :return: The encoding of this File.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this File.

        Encoding of the file.  # noqa: E501

        :param encoding: The encoding of this File.  # noqa: E501
        :type: str
        """

        self._encoding = encoding

    @property
    def type(self):
        """Gets the type of this File.  # noqa: E501

        Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.  # noqa: E501

        :return: The type of this File.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this File.

        Type of the file. Can be IMG, DOCUMENT, AUDIO, MOVIE, or OTHER.  # noqa: E501

        :param type: The type of this File.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def extension(self):
        """Gets the extension of this File.  # noqa: E501

        Extension of the file. For example png.  # noqa: E501

        :return: The extension of this File.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this File.

        Extension of the file. For example png.  # noqa: E501

        :param extension: The extension of this File.  # noqa: E501
        :type: str
        """

        self._extension = extension

    @property
    def default_hosting_url(self):
        """Gets the default_hosting_url of this File.  # noqa: E501

        Default hosting URL of the file. This will use one of HubSpot's provided URLs to serve the file.  # noqa: E501

        :return: The default_hosting_url of this File.  # noqa: E501
        :rtype: str
        """
        return self._default_hosting_url

    @default_hosting_url.setter
    def default_hosting_url(self, default_hosting_url):
        """Sets the default_hosting_url of this File.

        Default hosting URL of the file. This will use one of HubSpot's provided URLs to serve the file.  # noqa: E501

        :param default_hosting_url: The default_hosting_url of this File.  # noqa: E501
        :type: str
        """

        self._default_hosting_url = default_hosting_url

    @property
    def url(self):
        """Gets the url of this File.  # noqa: E501

        URL of the given file. This URL can change depending on the domain settings of the account. Will use the select file hosting domain.  # noqa: E501

        :return: The url of this File.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this File.

        URL of the given file. This URL can change depending on the domain settings of the account. Will use the select file hosting domain.  # noqa: E501

        :param url: The url of this File.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def is_usable_in_content(self):
        """Gets the is_usable_in_content of this File.  # noqa: E501

        Previously \"archied\". Indicates if the file should be used when creating new content like web pages.  # noqa: E501

        :return: The is_usable_in_content of this File.  # noqa: E501
        :rtype: bool
        """
        return self._is_usable_in_content

    @is_usable_in_content.setter
    def is_usable_in_content(self, is_usable_in_content):
        """Sets the is_usable_in_content of this File.

        Previously \"archied\". Indicates if the file should be used when creating new content like web pages.  # noqa: E501

        :param is_usable_in_content: The is_usable_in_content of this File.  # noqa: E501
        :type: bool
        """

        self._is_usable_in_content = is_usable_in_content

    @property
    def access(self):
        """Gets the access of this File.  # noqa: E501

        File access. Can be PUBLIC_INDEXABLE, PUBLIC_NOT_INDEXABLE, PRIVATE.  # noqa: E501

        :return: The access of this File.  # noqa: E501
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this File.

        File access. Can be PUBLIC_INDEXABLE, PUBLIC_NOT_INDEXABLE, PRIVATE.  # noqa: E501

        :param access: The access of this File.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and access is None:  # noqa: E501
            raise ValueError("Invalid value for `access`, must not be `None`")  # noqa: E501
        allowed_values = ["PUBLIC_INDEXABLE", "PUBLIC_NOT_INDEXABLE", "HIDDEN_INDEXABLE", "HIDDEN_NOT_INDEXABLE", "HIDDEN_PRIVATE", "PRIVATE"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and access not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `access` ({0}), must be one of {1}"  # noqa: E501
                .format(access, allowed_values)
            )

        self._access = access

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, File):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, File):
            return True

        return self.to_dict() != other.to_dict()
