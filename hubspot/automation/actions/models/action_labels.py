# coding: utf-8

"""
    Custom Workflow Actions

    Create custom workflow actions  # noqa: E501

    The version of the OpenAPI document: v4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from hubspot.automation.actions.configuration import Configuration


class ActionLabels(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'input_field_labels': 'dict(str, str)',
        'input_field_descriptions': 'dict(str, str)',
        'action_name': 'str',
        'action_description': 'str',
        'app_display_name': 'str',
        'action_card_content': 'str'
    }

    attribute_map = {
        'input_field_labels': 'inputFieldLabels',
        'input_field_descriptions': 'inputFieldDescriptions',
        'action_name': 'actionName',
        'action_description': 'actionDescription',
        'app_display_name': 'appDisplayName',
        'action_card_content': 'actionCardContent'
    }

    def __init__(self, input_field_labels=None, input_field_descriptions=None, action_name=None, action_description=None, app_display_name=None, action_card_content=None, local_vars_configuration=None):  # noqa: E501
        """ActionLabels - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._input_field_labels = None
        self._input_field_descriptions = None
        self._action_name = None
        self._action_description = None
        self._app_display_name = None
        self._action_card_content = None
        self.discriminator = None

        if input_field_labels is not None:
            self.input_field_labels = input_field_labels
        if input_field_descriptions is not None:
            self.input_field_descriptions = input_field_descriptions
        self.action_name = action_name
        if action_description is not None:
            self.action_description = action_description
        if app_display_name is not None:
            self.app_display_name = app_display_name
        if action_card_content is not None:
            self.action_card_content = action_card_content

    @property
    def input_field_labels(self):
        """Gets the input_field_labels of this ActionLabels.  # noqa: E501

        A map of input field names to the user-facing labels.  # noqa: E501

        :return: The input_field_labels of this ActionLabels.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._input_field_labels

    @input_field_labels.setter
    def input_field_labels(self, input_field_labels):
        """Sets the input_field_labels of this ActionLabels.

        A map of input field names to the user-facing labels.  # noqa: E501

        :param input_field_labels: The input_field_labels of this ActionLabels.  # noqa: E501
        :type: dict(str, str)
        """

        self._input_field_labels = input_field_labels

    @property
    def input_field_descriptions(self):
        """Gets the input_field_descriptions of this ActionLabels.  # noqa: E501

        A map of input field names to descriptions for the fields. These will show up as tooltips when users are editing your action.  # noqa: E501

        :return: The input_field_descriptions of this ActionLabels.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._input_field_descriptions

    @input_field_descriptions.setter
    def input_field_descriptions(self, input_field_descriptions):
        """Sets the input_field_descriptions of this ActionLabels.

        A map of input field names to descriptions for the fields. These will show up as tooltips when users are editing your action.  # noqa: E501

        :param input_field_descriptions: The input_field_descriptions of this ActionLabels.  # noqa: E501
        :type: dict(str, str)
        """

        self._input_field_descriptions = input_field_descriptions

    @property
    def action_name(self):
        """Gets the action_name of this ActionLabels.  # noqa: E501

        The name of this custom action. This is what will show up when users are selecting an action in the workflows app.  # noqa: E501

        :return: The action_name of this ActionLabels.  # noqa: E501
        :rtype: str
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this ActionLabels.

        The name of this custom action. This is what will show up when users are selecting an action in the workflows app.  # noqa: E501

        :param action_name: The action_name of this ActionLabels.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and action_name is None:  # noqa: E501
            raise ValueError("Invalid value for `action_name`, must not be `None`")  # noqa: E501

        self._action_name = action_name

    @property
    def action_description(self):
        """Gets the action_description of this ActionLabels.  # noqa: E501

        A description for this custom action. This will show up in the action editor along with the input fields.  # noqa: E501

        :return: The action_description of this ActionLabels.  # noqa: E501
        :rtype: str
        """
        return self._action_description

    @action_description.setter
    def action_description(self, action_description):
        """Sets the action_description of this ActionLabels.

        A description for this custom action. This will show up in the action editor along with the input fields.  # noqa: E501

        :param action_description: The action_description of this ActionLabels.  # noqa: E501
        :type: str
        """

        self._action_description = action_description

    @property
    def app_display_name(self):
        """Gets the app_display_name of this ActionLabels.  # noqa: E501

        The name to be displayed at the top of the action editor in the workflows app.  # noqa: E501

        :return: The app_display_name of this ActionLabels.  # noqa: E501
        :rtype: str
        """
        return self._app_display_name

    @app_display_name.setter
    def app_display_name(self, app_display_name):
        """Sets the app_display_name of this ActionLabels.

        The name to be displayed at the top of the action editor in the workflows app.  # noqa: E501

        :param app_display_name: The app_display_name of this ActionLabels.  # noqa: E501
        :type: str
        """

        self._app_display_name = app_display_name

    @property
    def action_card_content(self):
        """Gets the action_card_content of this ActionLabels.  # noqa: E501

        The label to be displayed in the action card of the workflow editor once this custom action has been added to a workflow.  # noqa: E501

        :return: The action_card_content of this ActionLabels.  # noqa: E501
        :rtype: str
        """
        return self._action_card_content

    @action_card_content.setter
    def action_card_content(self, action_card_content):
        """Sets the action_card_content of this ActionLabels.

        The label to be displayed in the action card of the workflow editor once this custom action has been added to a workflow.  # noqa: E501

        :param action_card_content: The action_card_content of this ActionLabels.  # noqa: E501
        :type: str
        """

        self._action_card_content = action_card_content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionLabels):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActionLabels):
            return True

        return self.to_dict() != other.to_dict()
