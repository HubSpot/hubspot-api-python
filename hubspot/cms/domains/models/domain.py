"""
    Domains

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from hubspot.cms.domains.configuration import Configuration


class Domain:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "portal_id": "int",
        "id": "int",
        "created": "int",
        "updated": "int",
        "domain": "str",
        "primary_landing_page": "bool",
        "primary_email": "bool",
        "primary_blog": "bool",
        "primary_blog_post": "bool",
        "primary_site_page": "bool",
        "primary_knowledge": "bool",
        "primary_legacy_page": "bool",
        "primary_click_tracking": "bool",
        "full_category_key": "str",
        "secondary_to_domain": "str",
        "is_resolving": "bool",
        "is_dns_correct": "bool",
        "manually_marked_as_resolving": "bool",
        "consecutive_non_resolving_count": "int",
        "ssl_cname": "str",
        "is_ssl_enabled": "bool",
        "is_ssl_only": "bool",
        "certificate_id": "int",
        "ssl_request_id": "int",
        "is_used_for_blog_post": "bool",
        "is_used_for_site_page": "bool",
        "is_used_for_landing_page": "bool",
        "is_used_for_email": "bool",
        "is_used_for_knowledge": "bool",
        "setup_task_id": "int",
        "is_setup_complete": "bool",
        "set_up_language": "str",
        "team_ids": "list[int]",
        "actual_cname": "str",
        "correct_cname": "str",
        "actual_ip": "str",
        "apex_resolution_status": "str",
        "apex_domain": "str",
        "public_suffix": "str",
        "apex_ip_addresses": "list[str]",
        "site_id": "int",
        "brand_id": "int",
        "deletable": "bool",
        "domain_cdn_config": "DomainCdnConfig",
        "setup_info": "DomainSetupInfo",
        "derived_brand_name": "str",
        "created_by_id": "int",
        "updated_by_id": "int",
        "label": "str",
        "is_any_primary": "bool",
        "is_legacy_domain": "bool",
        "is_internal_domain": "bool",
        "is_resolving_internal_property": "bool",
        "is_resolving_ignoring_manually_marked_as_resolving": "bool",
        "is_used_for_any_content_type": "bool",
        "is_legacy": "bool",
        "author_at": "int",
        "cos_object_type": "str",
        "cdn_purge_embargo_time": "int",
        "is_staging_domain": "bool",
    }

    attribute_map = {
        "portal_id": "portalId",
        "id": "id",
        "created": "created",
        "updated": "updated",
        "domain": "domain",
        "primary_landing_page": "primaryLandingPage",
        "primary_email": "primaryEmail",
        "primary_blog": "primaryBlog",
        "primary_blog_post": "primaryBlogPost",
        "primary_site_page": "primarySitePage",
        "primary_knowledge": "primaryKnowledge",
        "primary_legacy_page": "primaryLegacyPage",
        "primary_click_tracking": "primaryClickTracking",
        "full_category_key": "fullCategoryKey",
        "secondary_to_domain": "secondaryToDomain",
        "is_resolving": "isResolving",
        "is_dns_correct": "isDnsCorrect",
        "manually_marked_as_resolving": "manuallyMarkedAsResolving",
        "consecutive_non_resolving_count": "consecutiveNonResolvingCount",
        "ssl_cname": "sslCname",
        "is_ssl_enabled": "isSslEnabled",
        "is_ssl_only": "isSslOnly",
        "certificate_id": "certificateId",
        "ssl_request_id": "sslRequestId",
        "is_used_for_blog_post": "isUsedForBlogPost",
        "is_used_for_site_page": "isUsedForSitePage",
        "is_used_for_landing_page": "isUsedForLandingPage",
        "is_used_for_email": "isUsedForEmail",
        "is_used_for_knowledge": "isUsedForKnowledge",
        "setup_task_id": "setupTaskId",
        "is_setup_complete": "isSetupComplete",
        "set_up_language": "setUpLanguage",
        "team_ids": "teamIds",
        "actual_cname": "actualCname",
        "correct_cname": "correctCname",
        "actual_ip": "actualIp",
        "apex_resolution_status": "apexResolutionStatus",
        "apex_domain": "apexDomain",
        "public_suffix": "publicSuffix",
        "apex_ip_addresses": "apexIpAddresses",
        "site_id": "siteId",
        "brand_id": "brandId",
        "deletable": "deletable",
        "domain_cdn_config": "domainCdnConfig",
        "setup_info": "setupInfo",
        "derived_brand_name": "derivedBrandName",
        "created_by_id": "createdById",
        "updated_by_id": "updatedById",
        "label": "label",
        "is_any_primary": "isAnyPrimary",
        "is_legacy_domain": "isLegacyDomain",
        "is_internal_domain": "isInternalDomain",
        "is_resolving_internal_property": "isResolvingInternalProperty",
        "is_resolving_ignoring_manually_marked_as_resolving": "isResolvingIgnoringManuallyMarkedAsResolving",
        "is_used_for_any_content_type": "isUsedForAnyContentType",
        "is_legacy": "isLegacy",
        "author_at": "authorAt",
        "cos_object_type": "cosObjectType",
        "cdn_purge_embargo_time": "cdnPurgeEmbargoTime",
        "is_staging_domain": "isStagingDomain",
    }

    def __init__(
        self,
        portal_id=None,
        id=None,
        created=None,
        updated=None,
        domain=None,
        primary_landing_page=None,
        primary_email=None,
        primary_blog=None,
        primary_blog_post=None,
        primary_site_page=None,
        primary_knowledge=None,
        primary_legacy_page=None,
        primary_click_tracking=None,
        full_category_key=None,
        secondary_to_domain=None,
        is_resolving=None,
        is_dns_correct=None,
        manually_marked_as_resolving=None,
        consecutive_non_resolving_count=None,
        ssl_cname=None,
        is_ssl_enabled=None,
        is_ssl_only=None,
        certificate_id=None,
        ssl_request_id=None,
        is_used_for_blog_post=None,
        is_used_for_site_page=None,
        is_used_for_landing_page=None,
        is_used_for_email=None,
        is_used_for_knowledge=None,
        setup_task_id=None,
        is_setup_complete=None,
        set_up_language=None,
        team_ids=None,
        actual_cname=None,
        correct_cname=None,
        actual_ip=None,
        apex_resolution_status=None,
        apex_domain=None,
        public_suffix=None,
        apex_ip_addresses=None,
        site_id=None,
        brand_id=None,
        deletable=None,
        domain_cdn_config=None,
        setup_info=None,
        derived_brand_name=None,
        created_by_id=None,
        updated_by_id=None,
        label=None,
        is_any_primary=None,
        is_legacy_domain=None,
        is_internal_domain=None,
        is_resolving_internal_property=None,
        is_resolving_ignoring_manually_marked_as_resolving=None,
        is_used_for_any_content_type=None,
        is_legacy=None,
        author_at=None,
        cos_object_type=None,
        cdn_purge_embargo_time=None,
        is_staging_domain=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """Domain - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._portal_id = None
        self._id = None
        self._created = None
        self._updated = None
        self._domain = None
        self._primary_landing_page = None
        self._primary_email = None
        self._primary_blog = None
        self._primary_blog_post = None
        self._primary_site_page = None
        self._primary_knowledge = None
        self._primary_legacy_page = None
        self._primary_click_tracking = None
        self._full_category_key = None
        self._secondary_to_domain = None
        self._is_resolving = None
        self._is_dns_correct = None
        self._manually_marked_as_resolving = None
        self._consecutive_non_resolving_count = None
        self._ssl_cname = None
        self._is_ssl_enabled = None
        self._is_ssl_only = None
        self._certificate_id = None
        self._ssl_request_id = None
        self._is_used_for_blog_post = None
        self._is_used_for_site_page = None
        self._is_used_for_landing_page = None
        self._is_used_for_email = None
        self._is_used_for_knowledge = None
        self._setup_task_id = None
        self._is_setup_complete = None
        self._set_up_language = None
        self._team_ids = None
        self._actual_cname = None
        self._correct_cname = None
        self._actual_ip = None
        self._apex_resolution_status = None
        self._apex_domain = None
        self._public_suffix = None
        self._apex_ip_addresses = None
        self._site_id = None
        self._brand_id = None
        self._deletable = None
        self._domain_cdn_config = None
        self._setup_info = None
        self._derived_brand_name = None
        self._created_by_id = None
        self._updated_by_id = None
        self._label = None
        self._is_any_primary = None
        self._is_legacy_domain = None
        self._is_internal_domain = None
        self._is_resolving_internal_property = None
        self._is_resolving_ignoring_manually_marked_as_resolving = None
        self._is_used_for_any_content_type = None
        self._is_legacy = None
        self._author_at = None
        self._cos_object_type = None
        self._cdn_purge_embargo_time = None
        self._is_staging_domain = None
        self.discriminator = None

        self.portal_id = portal_id
        self.id = id
        self.created = created
        self.updated = updated
        self.domain = domain
        self.primary_landing_page = primary_landing_page
        self.primary_email = primary_email
        self.primary_blog = primary_blog
        self.primary_blog_post = primary_blog_post
        self.primary_site_page = primary_site_page
        self.primary_knowledge = primary_knowledge
        self.primary_legacy_page = primary_legacy_page
        self.primary_click_tracking = primary_click_tracking
        self.full_category_key = full_category_key
        self.secondary_to_domain = secondary_to_domain
        self.is_resolving = is_resolving
        self.is_dns_correct = is_dns_correct
        self.manually_marked_as_resolving = manually_marked_as_resolving
        self.consecutive_non_resolving_count = consecutive_non_resolving_count
        self.ssl_cname = ssl_cname
        self.is_ssl_enabled = is_ssl_enabled
        self.is_ssl_only = is_ssl_only
        self.certificate_id = certificate_id
        self.ssl_request_id = ssl_request_id
        self.is_used_for_blog_post = is_used_for_blog_post
        self.is_used_for_site_page = is_used_for_site_page
        self.is_used_for_landing_page = is_used_for_landing_page
        self.is_used_for_email = is_used_for_email
        self.is_used_for_knowledge = is_used_for_knowledge
        self.setup_task_id = setup_task_id
        self.is_setup_complete = is_setup_complete
        self.set_up_language = set_up_language
        self.team_ids = team_ids
        self.actual_cname = actual_cname
        self.correct_cname = correct_cname
        self.actual_ip = actual_ip
        self.apex_resolution_status = apex_resolution_status
        self.apex_domain = apex_domain
        self.public_suffix = public_suffix
        self.apex_ip_addresses = apex_ip_addresses
        self.site_id = site_id
        self.brand_id = brand_id
        self.deletable = deletable
        self.domain_cdn_config = domain_cdn_config
        self.setup_info = setup_info
        self.derived_brand_name = derived_brand_name
        self.created_by_id = created_by_id
        self.updated_by_id = updated_by_id
        self.label = label
        self.is_any_primary = is_any_primary
        self.is_legacy_domain = is_legacy_domain
        self.is_internal_domain = is_internal_domain
        self.is_resolving_internal_property = is_resolving_internal_property
        self.is_resolving_ignoring_manually_marked_as_resolving = (
            is_resolving_ignoring_manually_marked_as_resolving
        )
        self.is_used_for_any_content_type = is_used_for_any_content_type
        self.is_legacy = is_legacy
        self.author_at = author_at
        self.cos_object_type = cos_object_type
        self.cdn_purge_embargo_time = cdn_purge_embargo_time
        self.is_staging_domain = is_staging_domain

    @property
    def portal_id(self):
        """Gets the portal_id of this Domain.  # noqa: E501


        :return: The portal_id of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._portal_id

    @portal_id.setter
    def portal_id(self, portal_id):
        """Sets the portal_id of this Domain.


        :param portal_id: The portal_id of this Domain.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation and portal_id is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `portal_id`, must not be `None`"
            )  # noqa: E501

        self._portal_id = portal_id

    @property
    def id(self):
        """Gets the id of this Domain.  # noqa: E501


        :return: The id of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Domain.


        :param id: The id of this Domain.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation and id is None
        ):  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created(self):
        """Gets the created of this Domain.  # noqa: E501


        :return: The created of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Domain.


        :param created: The created of this Domain.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation and created is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `created`, must not be `None`"
            )  # noqa: E501

        self._created = created

    @property
    def updated(self):
        """Gets the updated of this Domain.  # noqa: E501


        :return: The updated of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Domain.


        :param updated: The updated of this Domain.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation and updated is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `updated`, must not be `None`"
            )  # noqa: E501

        self._updated = updated

    @property
    def domain(self):
        """Gets the domain of this Domain.  # noqa: E501


        :return: The domain of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Domain.


        :param domain: The domain of this Domain.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and domain is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `domain`, must not be `None`"
            )  # noqa: E501

        self._domain = domain

    @property
    def primary_landing_page(self):
        """Gets the primary_landing_page of this Domain.  # noqa: E501


        :return: The primary_landing_page of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._primary_landing_page

    @primary_landing_page.setter
    def primary_landing_page(self, primary_landing_page):
        """Sets the primary_landing_page of this Domain.


        :param primary_landing_page: The primary_landing_page of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and primary_landing_page is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `primary_landing_page`, must not be `None`"
            )  # noqa: E501

        self._primary_landing_page = primary_landing_page

    @property
    def primary_email(self):
        """Gets the primary_email of this Domain.  # noqa: E501


        :return: The primary_email of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._primary_email

    @primary_email.setter
    def primary_email(self, primary_email):
        """Sets the primary_email of this Domain.


        :param primary_email: The primary_email of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and primary_email is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `primary_email`, must not be `None`"
            )  # noqa: E501

        self._primary_email = primary_email

    @property
    def primary_blog(self):
        """Gets the primary_blog of this Domain.  # noqa: E501


        :return: The primary_blog of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._primary_blog

    @primary_blog.setter
    def primary_blog(self, primary_blog):
        """Sets the primary_blog of this Domain.


        :param primary_blog: The primary_blog of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and primary_blog is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `primary_blog`, must not be `None`"
            )  # noqa: E501

        self._primary_blog = primary_blog

    @property
    def primary_blog_post(self):
        """Gets the primary_blog_post of this Domain.  # noqa: E501


        :return: The primary_blog_post of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._primary_blog_post

    @primary_blog_post.setter
    def primary_blog_post(self, primary_blog_post):
        """Sets the primary_blog_post of this Domain.


        :param primary_blog_post: The primary_blog_post of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and primary_blog_post is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `primary_blog_post`, must not be `None`"
            )  # noqa: E501

        self._primary_blog_post = primary_blog_post

    @property
    def primary_site_page(self):
        """Gets the primary_site_page of this Domain.  # noqa: E501


        :return: The primary_site_page of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._primary_site_page

    @primary_site_page.setter
    def primary_site_page(self, primary_site_page):
        """Sets the primary_site_page of this Domain.


        :param primary_site_page: The primary_site_page of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and primary_site_page is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `primary_site_page`, must not be `None`"
            )  # noqa: E501

        self._primary_site_page = primary_site_page

    @property
    def primary_knowledge(self):
        """Gets the primary_knowledge of this Domain.  # noqa: E501


        :return: The primary_knowledge of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._primary_knowledge

    @primary_knowledge.setter
    def primary_knowledge(self, primary_knowledge):
        """Sets the primary_knowledge of this Domain.


        :param primary_knowledge: The primary_knowledge of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and primary_knowledge is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `primary_knowledge`, must not be `None`"
            )  # noqa: E501

        self._primary_knowledge = primary_knowledge

    @property
    def primary_legacy_page(self):
        """Gets the primary_legacy_page of this Domain.  # noqa: E501


        :return: The primary_legacy_page of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._primary_legacy_page

    @primary_legacy_page.setter
    def primary_legacy_page(self, primary_legacy_page):
        """Sets the primary_legacy_page of this Domain.


        :param primary_legacy_page: The primary_legacy_page of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and primary_legacy_page is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `primary_legacy_page`, must not be `None`"
            )  # noqa: E501

        self._primary_legacy_page = primary_legacy_page

    @property
    def primary_click_tracking(self):
        """Gets the primary_click_tracking of this Domain.  # noqa: E501


        :return: The primary_click_tracking of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._primary_click_tracking

    @primary_click_tracking.setter
    def primary_click_tracking(self, primary_click_tracking):
        """Sets the primary_click_tracking of this Domain.


        :param primary_click_tracking: The primary_click_tracking of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and primary_click_tracking is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `primary_click_tracking`, must not be `None`"
            )  # noqa: E501

        self._primary_click_tracking = primary_click_tracking

    @property
    def full_category_key(self):
        """Gets the full_category_key of this Domain.  # noqa: E501


        :return: The full_category_key of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._full_category_key

    @full_category_key.setter
    def full_category_key(self, full_category_key):
        """Sets the full_category_key of this Domain.


        :param full_category_key: The full_category_key of this Domain.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and full_category_key is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `full_category_key`, must not be `None`"
            )  # noqa: E501

        self._full_category_key = full_category_key

    @property
    def secondary_to_domain(self):
        """Gets the secondary_to_domain of this Domain.  # noqa: E501


        :return: The secondary_to_domain of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._secondary_to_domain

    @secondary_to_domain.setter
    def secondary_to_domain(self, secondary_to_domain):
        """Sets the secondary_to_domain of this Domain.


        :param secondary_to_domain: The secondary_to_domain of this Domain.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and secondary_to_domain is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `secondary_to_domain`, must not be `None`"
            )  # noqa: E501

        self._secondary_to_domain = secondary_to_domain

    @property
    def is_resolving(self):
        """Gets the is_resolving of this Domain.  # noqa: E501


        :return: The is_resolving of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_resolving

    @is_resolving.setter
    def is_resolving(self, is_resolving):
        """Sets the is_resolving of this Domain.


        :param is_resolving: The is_resolving of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and is_resolving is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_resolving`, must not be `None`"
            )  # noqa: E501

        self._is_resolving = is_resolving

    @property
    def is_dns_correct(self):
        """Gets the is_dns_correct of this Domain.  # noqa: E501


        :return: The is_dns_correct of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_dns_correct

    @is_dns_correct.setter
    def is_dns_correct(self, is_dns_correct):
        """Sets the is_dns_correct of this Domain.


        :param is_dns_correct: The is_dns_correct of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and is_dns_correct is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_dns_correct`, must not be `None`"
            )  # noqa: E501

        self._is_dns_correct = is_dns_correct

    @property
    def manually_marked_as_resolving(self):
        """Gets the manually_marked_as_resolving of this Domain.  # noqa: E501


        :return: The manually_marked_as_resolving of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._manually_marked_as_resolving

    @manually_marked_as_resolving.setter
    def manually_marked_as_resolving(self, manually_marked_as_resolving):
        """Sets the manually_marked_as_resolving of this Domain.


        :param manually_marked_as_resolving: The manually_marked_as_resolving of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and manually_marked_as_resolving is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `manually_marked_as_resolving`, must not be `None`"
            )  # noqa: E501

        self._manually_marked_as_resolving = manually_marked_as_resolving

    @property
    def consecutive_non_resolving_count(self):
        """Gets the consecutive_non_resolving_count of this Domain.  # noqa: E501


        :return: The consecutive_non_resolving_count of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._consecutive_non_resolving_count

    @consecutive_non_resolving_count.setter
    def consecutive_non_resolving_count(self, consecutive_non_resolving_count):
        """Sets the consecutive_non_resolving_count of this Domain.


        :param consecutive_non_resolving_count: The consecutive_non_resolving_count of this Domain.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and consecutive_non_resolving_count is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `consecutive_non_resolving_count`, must not be `None`"
            )  # noqa: E501

        self._consecutive_non_resolving_count = consecutive_non_resolving_count

    @property
    def ssl_cname(self):
        """Gets the ssl_cname of this Domain.  # noqa: E501


        :return: The ssl_cname of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._ssl_cname

    @ssl_cname.setter
    def ssl_cname(self, ssl_cname):
        """Sets the ssl_cname of this Domain.


        :param ssl_cname: The ssl_cname of this Domain.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and ssl_cname is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `ssl_cname`, must not be `None`"
            )  # noqa: E501

        self._ssl_cname = ssl_cname

    @property
    def is_ssl_enabled(self):
        """Gets the is_ssl_enabled of this Domain.  # noqa: E501


        :return: The is_ssl_enabled of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_ssl_enabled

    @is_ssl_enabled.setter
    def is_ssl_enabled(self, is_ssl_enabled):
        """Sets the is_ssl_enabled of this Domain.


        :param is_ssl_enabled: The is_ssl_enabled of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and is_ssl_enabled is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_ssl_enabled`, must not be `None`"
            )  # noqa: E501

        self._is_ssl_enabled = is_ssl_enabled

    @property
    def is_ssl_only(self):
        """Gets the is_ssl_only of this Domain.  # noqa: E501


        :return: The is_ssl_only of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_ssl_only

    @is_ssl_only.setter
    def is_ssl_only(self, is_ssl_only):
        """Sets the is_ssl_only of this Domain.


        :param is_ssl_only: The is_ssl_only of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation and is_ssl_only is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_ssl_only`, must not be `None`"
            )  # noqa: E501

        self._is_ssl_only = is_ssl_only

    @property
    def certificate_id(self):
        """Gets the certificate_id of this Domain.  # noqa: E501


        :return: The certificate_id of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._certificate_id

    @certificate_id.setter
    def certificate_id(self, certificate_id):
        """Sets the certificate_id of this Domain.


        :param certificate_id: The certificate_id of this Domain.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and certificate_id is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `certificate_id`, must not be `None`"
            )  # noqa: E501

        self._certificate_id = certificate_id

    @property
    def ssl_request_id(self):
        """Gets the ssl_request_id of this Domain.  # noqa: E501


        :return: The ssl_request_id of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._ssl_request_id

    @ssl_request_id.setter
    def ssl_request_id(self, ssl_request_id):
        """Sets the ssl_request_id of this Domain.


        :param ssl_request_id: The ssl_request_id of this Domain.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and ssl_request_id is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `ssl_request_id`, must not be `None`"
            )  # noqa: E501

        self._ssl_request_id = ssl_request_id

    @property
    def is_used_for_blog_post(self):
        """Gets the is_used_for_blog_post of this Domain.  # noqa: E501


        :return: The is_used_for_blog_post of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_used_for_blog_post

    @is_used_for_blog_post.setter
    def is_used_for_blog_post(self, is_used_for_blog_post):
        """Sets the is_used_for_blog_post of this Domain.


        :param is_used_for_blog_post: The is_used_for_blog_post of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and is_used_for_blog_post is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_used_for_blog_post`, must not be `None`"
            )  # noqa: E501

        self._is_used_for_blog_post = is_used_for_blog_post

    @property
    def is_used_for_site_page(self):
        """Gets the is_used_for_site_page of this Domain.  # noqa: E501


        :return: The is_used_for_site_page of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_used_for_site_page

    @is_used_for_site_page.setter
    def is_used_for_site_page(self, is_used_for_site_page):
        """Sets the is_used_for_site_page of this Domain.


        :param is_used_for_site_page: The is_used_for_site_page of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and is_used_for_site_page is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_used_for_site_page`, must not be `None`"
            )  # noqa: E501

        self._is_used_for_site_page = is_used_for_site_page

    @property
    def is_used_for_landing_page(self):
        """Gets the is_used_for_landing_page of this Domain.  # noqa: E501


        :return: The is_used_for_landing_page of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_used_for_landing_page

    @is_used_for_landing_page.setter
    def is_used_for_landing_page(self, is_used_for_landing_page):
        """Sets the is_used_for_landing_page of this Domain.


        :param is_used_for_landing_page: The is_used_for_landing_page of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and is_used_for_landing_page is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_used_for_landing_page`, must not be `None`"
            )  # noqa: E501

        self._is_used_for_landing_page = is_used_for_landing_page

    @property
    def is_used_for_email(self):
        """Gets the is_used_for_email of this Domain.  # noqa: E501


        :return: The is_used_for_email of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_used_for_email

    @is_used_for_email.setter
    def is_used_for_email(self, is_used_for_email):
        """Sets the is_used_for_email of this Domain.


        :param is_used_for_email: The is_used_for_email of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and is_used_for_email is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_used_for_email`, must not be `None`"
            )  # noqa: E501

        self._is_used_for_email = is_used_for_email

    @property
    def is_used_for_knowledge(self):
        """Gets the is_used_for_knowledge of this Domain.  # noqa: E501


        :return: The is_used_for_knowledge of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_used_for_knowledge

    @is_used_for_knowledge.setter
    def is_used_for_knowledge(self, is_used_for_knowledge):
        """Sets the is_used_for_knowledge of this Domain.


        :param is_used_for_knowledge: The is_used_for_knowledge of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and is_used_for_knowledge is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_used_for_knowledge`, must not be `None`"
            )  # noqa: E501

        self._is_used_for_knowledge = is_used_for_knowledge

    @property
    def setup_task_id(self):
        """Gets the setup_task_id of this Domain.  # noqa: E501


        :return: The setup_task_id of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._setup_task_id

    @setup_task_id.setter
    def setup_task_id(self, setup_task_id):
        """Sets the setup_task_id of this Domain.


        :param setup_task_id: The setup_task_id of this Domain.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and setup_task_id is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `setup_task_id`, must not be `None`"
            )  # noqa: E501

        self._setup_task_id = setup_task_id

    @property
    def is_setup_complete(self):
        """Gets the is_setup_complete of this Domain.  # noqa: E501


        :return: The is_setup_complete of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_setup_complete

    @is_setup_complete.setter
    def is_setup_complete(self, is_setup_complete):
        """Sets the is_setup_complete of this Domain.


        :param is_setup_complete: The is_setup_complete of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and is_setup_complete is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_setup_complete`, must not be `None`"
            )  # noqa: E501

        self._is_setup_complete = is_setup_complete

    @property
    def set_up_language(self):
        """Gets the set_up_language of this Domain.  # noqa: E501


        :return: The set_up_language of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._set_up_language

    @set_up_language.setter
    def set_up_language(self, set_up_language):
        """Sets the set_up_language of this Domain.


        :param set_up_language: The set_up_language of this Domain.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and set_up_language is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `set_up_language`, must not be `None`"
            )  # noqa: E501

        self._set_up_language = set_up_language

    @property
    def team_ids(self):
        """Gets the team_ids of this Domain.  # noqa: E501


        :return: The team_ids of this Domain.  # noqa: E501
        :rtype: list[int]
        """
        return self._team_ids

    @team_ids.setter
    def team_ids(self, team_ids):
        """Sets the team_ids of this Domain.


        :param team_ids: The team_ids of this Domain.  # noqa: E501
        :type: list[int]
        """
        if (
            self.local_vars_configuration.client_side_validation and team_ids is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `team_ids`, must not be `None`"
            )  # noqa: E501

        self._team_ids = team_ids

    @property
    def actual_cname(self):
        """Gets the actual_cname of this Domain.  # noqa: E501


        :return: The actual_cname of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._actual_cname

    @actual_cname.setter
    def actual_cname(self, actual_cname):
        """Sets the actual_cname of this Domain.


        :param actual_cname: The actual_cname of this Domain.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and actual_cname is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `actual_cname`, must not be `None`"
            )  # noqa: E501

        self._actual_cname = actual_cname

    @property
    def correct_cname(self):
        """Gets the correct_cname of this Domain.  # noqa: E501


        :return: The correct_cname of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._correct_cname

    @correct_cname.setter
    def correct_cname(self, correct_cname):
        """Sets the correct_cname of this Domain.


        :param correct_cname: The correct_cname of this Domain.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and correct_cname is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `correct_cname`, must not be `None`"
            )  # noqa: E501

        self._correct_cname = correct_cname

    @property
    def actual_ip(self):
        """Gets the actual_ip of this Domain.  # noqa: E501


        :return: The actual_ip of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._actual_ip

    @actual_ip.setter
    def actual_ip(self, actual_ip):
        """Sets the actual_ip of this Domain.


        :param actual_ip: The actual_ip of this Domain.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and actual_ip is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `actual_ip`, must not be `None`"
            )  # noqa: E501

        self._actual_ip = actual_ip

    @property
    def apex_resolution_status(self):
        """Gets the apex_resolution_status of this Domain.  # noqa: E501


        :return: The apex_resolution_status of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._apex_resolution_status

    @apex_resolution_status.setter
    def apex_resolution_status(self, apex_resolution_status):
        """Sets the apex_resolution_status of this Domain.


        :param apex_resolution_status: The apex_resolution_status of this Domain.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and apex_resolution_status is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `apex_resolution_status`, must not be `None`"
            )  # noqa: E501
        allowed_values = [
            "INELIGIBLE",
            "SUGGEST_RESOLVING",
            "ALREADY_RESOLVING",
            "ERROR",
        ]  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and apex_resolution_status not in allowed_values
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `apex_resolution_status` ({}), must be one of {}".format(  # noqa: E501
                    apex_resolution_status, allowed_values
                )
            )

        self._apex_resolution_status = apex_resolution_status

    @property
    def apex_domain(self):
        """Gets the apex_domain of this Domain.  # noqa: E501


        :return: The apex_domain of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._apex_domain

    @apex_domain.setter
    def apex_domain(self, apex_domain):
        """Sets the apex_domain of this Domain.


        :param apex_domain: The apex_domain of this Domain.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and apex_domain is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `apex_domain`, must not be `None`"
            )  # noqa: E501

        self._apex_domain = apex_domain

    @property
    def public_suffix(self):
        """Gets the public_suffix of this Domain.  # noqa: E501


        :return: The public_suffix of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._public_suffix

    @public_suffix.setter
    def public_suffix(self, public_suffix):
        """Sets the public_suffix of this Domain.


        :param public_suffix: The public_suffix of this Domain.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and public_suffix is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `public_suffix`, must not be `None`"
            )  # noqa: E501

        self._public_suffix = public_suffix

    @property
    def apex_ip_addresses(self):
        """Gets the apex_ip_addresses of this Domain.  # noqa: E501


        :return: The apex_ip_addresses of this Domain.  # noqa: E501
        :rtype: list[str]
        """
        return self._apex_ip_addresses

    @apex_ip_addresses.setter
    def apex_ip_addresses(self, apex_ip_addresses):
        """Sets the apex_ip_addresses of this Domain.


        :param apex_ip_addresses: The apex_ip_addresses of this Domain.  # noqa: E501
        :type: list[str]
        """
        if (
            self.local_vars_configuration.client_side_validation
            and apex_ip_addresses is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `apex_ip_addresses`, must not be `None`"
            )  # noqa: E501

        self._apex_ip_addresses = apex_ip_addresses

    @property
    def site_id(self):
        """Gets the site_id of this Domain.  # noqa: E501


        :return: The site_id of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this Domain.


        :param site_id: The site_id of this Domain.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation and site_id is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `site_id`, must not be `None`"
            )  # noqa: E501

        self._site_id = site_id

    @property
    def brand_id(self):
        """Gets the brand_id of this Domain.  # noqa: E501


        :return: The brand_id of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._brand_id

    @brand_id.setter
    def brand_id(self, brand_id):
        """Sets the brand_id of this Domain.


        :param brand_id: The brand_id of this Domain.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation and brand_id is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `brand_id`, must not be `None`"
            )  # noqa: E501

        self._brand_id = brand_id

    @property
    def deletable(self):
        """Gets the deletable of this Domain.  # noqa: E501


        :return: The deletable of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._deletable

    @deletable.setter
    def deletable(self, deletable):
        """Sets the deletable of this Domain.


        :param deletable: The deletable of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation and deletable is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `deletable`, must not be `None`"
            )  # noqa: E501

        self._deletable = deletable

    @property
    def domain_cdn_config(self):
        """Gets the domain_cdn_config of this Domain.  # noqa: E501


        :return: The domain_cdn_config of this Domain.  # noqa: E501
        :rtype: DomainCdnConfig
        """
        return self._domain_cdn_config

    @domain_cdn_config.setter
    def domain_cdn_config(self, domain_cdn_config):
        """Sets the domain_cdn_config of this Domain.


        :param domain_cdn_config: The domain_cdn_config of this Domain.  # noqa: E501
        :type: DomainCdnConfig
        """
        if (
            self.local_vars_configuration.client_side_validation
            and domain_cdn_config is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `domain_cdn_config`, must not be `None`"
            )  # noqa: E501

        self._domain_cdn_config = domain_cdn_config

    @property
    def setup_info(self):
        """Gets the setup_info of this Domain.  # noqa: E501


        :return: The setup_info of this Domain.  # noqa: E501
        :rtype: DomainSetupInfo
        """
        return self._setup_info

    @setup_info.setter
    def setup_info(self, setup_info):
        """Sets the setup_info of this Domain.


        :param setup_info: The setup_info of this Domain.  # noqa: E501
        :type: DomainSetupInfo
        """
        if (
            self.local_vars_configuration.client_side_validation and setup_info is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `setup_info`, must not be `None`"
            )  # noqa: E501

        self._setup_info = setup_info

    @property
    def derived_brand_name(self):
        """Gets the derived_brand_name of this Domain.  # noqa: E501


        :return: The derived_brand_name of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._derived_brand_name

    @derived_brand_name.setter
    def derived_brand_name(self, derived_brand_name):
        """Sets the derived_brand_name of this Domain.


        :param derived_brand_name: The derived_brand_name of this Domain.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and derived_brand_name is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `derived_brand_name`, must not be `None`"
            )  # noqa: E501

        self._derived_brand_name = derived_brand_name

    @property
    def created_by_id(self):
        """Gets the created_by_id of this Domain.  # noqa: E501


        :return: The created_by_id of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this Domain.


        :param created_by_id: The created_by_id of this Domain.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and created_by_id is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `created_by_id`, must not be `None`"
            )  # noqa: E501

        self._created_by_id = created_by_id

    @property
    def updated_by_id(self):
        """Gets the updated_by_id of this Domain.  # noqa: E501


        :return: The updated_by_id of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._updated_by_id

    @updated_by_id.setter
    def updated_by_id(self, updated_by_id):
        """Sets the updated_by_id of this Domain.


        :param updated_by_id: The updated_by_id of this Domain.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and updated_by_id is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `updated_by_id`, must not be `None`"
            )  # noqa: E501

        self._updated_by_id = updated_by_id

    @property
    def label(self):
        """Gets the label of this Domain.  # noqa: E501


        :return: The label of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Domain.


        :param label: The label of this Domain.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and label is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `label`, must not be `None`"
            )  # noqa: E501

        self._label = label

    @property
    def is_any_primary(self):
        """Gets the is_any_primary of this Domain.  # noqa: E501


        :return: The is_any_primary of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_any_primary

    @is_any_primary.setter
    def is_any_primary(self, is_any_primary):
        """Sets the is_any_primary of this Domain.


        :param is_any_primary: The is_any_primary of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and is_any_primary is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_any_primary`, must not be `None`"
            )  # noqa: E501

        self._is_any_primary = is_any_primary

    @property
    def is_legacy_domain(self):
        """Gets the is_legacy_domain of this Domain.  # noqa: E501


        :return: The is_legacy_domain of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_legacy_domain

    @is_legacy_domain.setter
    def is_legacy_domain(self, is_legacy_domain):
        """Sets the is_legacy_domain of this Domain.


        :param is_legacy_domain: The is_legacy_domain of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and is_legacy_domain is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_legacy_domain`, must not be `None`"
            )  # noqa: E501

        self._is_legacy_domain = is_legacy_domain

    @property
    def is_internal_domain(self):
        """Gets the is_internal_domain of this Domain.  # noqa: E501


        :return: The is_internal_domain of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_internal_domain

    @is_internal_domain.setter
    def is_internal_domain(self, is_internal_domain):
        """Sets the is_internal_domain of this Domain.


        :param is_internal_domain: The is_internal_domain of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and is_internal_domain is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_internal_domain`, must not be `None`"
            )  # noqa: E501

        self._is_internal_domain = is_internal_domain

    @property
    def is_resolving_internal_property(self):
        """Gets the is_resolving_internal_property of this Domain.  # noqa: E501


        :return: The is_resolving_internal_property of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_resolving_internal_property

    @is_resolving_internal_property.setter
    def is_resolving_internal_property(self, is_resolving_internal_property):
        """Sets the is_resolving_internal_property of this Domain.


        :param is_resolving_internal_property: The is_resolving_internal_property of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and is_resolving_internal_property is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_resolving_internal_property`, must not be `None`"
            )  # noqa: E501

        self._is_resolving_internal_property = is_resolving_internal_property

    @property
    def is_resolving_ignoring_manually_marked_as_resolving(self):
        """Gets the is_resolving_ignoring_manually_marked_as_resolving of this Domain.  # noqa: E501


        :return: The is_resolving_ignoring_manually_marked_as_resolving of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_resolving_ignoring_manually_marked_as_resolving

    @is_resolving_ignoring_manually_marked_as_resolving.setter
    def is_resolving_ignoring_manually_marked_as_resolving(
        self, is_resolving_ignoring_manually_marked_as_resolving
    ):
        """Sets the is_resolving_ignoring_manually_marked_as_resolving of this Domain.


        :param is_resolving_ignoring_manually_marked_as_resolving: The is_resolving_ignoring_manually_marked_as_resolving of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and is_resolving_ignoring_manually_marked_as_resolving is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_resolving_ignoring_manually_marked_as_resolving`, must not be `None`"
            )  # noqa: E501

        self._is_resolving_ignoring_manually_marked_as_resolving = (
            is_resolving_ignoring_manually_marked_as_resolving
        )

    @property
    def is_used_for_any_content_type(self):
        """Gets the is_used_for_any_content_type of this Domain.  # noqa: E501


        :return: The is_used_for_any_content_type of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_used_for_any_content_type

    @is_used_for_any_content_type.setter
    def is_used_for_any_content_type(self, is_used_for_any_content_type):
        """Sets the is_used_for_any_content_type of this Domain.


        :param is_used_for_any_content_type: The is_used_for_any_content_type of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and is_used_for_any_content_type is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_used_for_any_content_type`, must not be `None`"
            )  # noqa: E501

        self._is_used_for_any_content_type = is_used_for_any_content_type

    @property
    def is_legacy(self):
        """Gets the is_legacy of this Domain.  # noqa: E501


        :return: The is_legacy of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_legacy

    @is_legacy.setter
    def is_legacy(self, is_legacy):
        """Sets the is_legacy of this Domain.


        :param is_legacy: The is_legacy of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation and is_legacy is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_legacy`, must not be `None`"
            )  # noqa: E501

        self._is_legacy = is_legacy

    @property
    def author_at(self):
        """Gets the author_at of this Domain.  # noqa: E501


        :return: The author_at of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._author_at

    @author_at.setter
    def author_at(self, author_at):
        """Sets the author_at of this Domain.


        :param author_at: The author_at of this Domain.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation and author_at is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `author_at`, must not be `None`"
            )  # noqa: E501

        self._author_at = author_at

    @property
    def cos_object_type(self):
        """Gets the cos_object_type of this Domain.  # noqa: E501


        :return: The cos_object_type of this Domain.  # noqa: E501
        :rtype: str
        """
        return self._cos_object_type

    @cos_object_type.setter
    def cos_object_type(self, cos_object_type):
        """Sets the cos_object_type of this Domain.


        :param cos_object_type: The cos_object_type of this Domain.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation
            and cos_object_type is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `cos_object_type`, must not be `None`"
            )  # noqa: E501
        allowed_values = [
            "CONTENT",
            "EXTENSION_RESOURCE",
            "LAYOUT",
            "CUSTOM_WIDGET",
            "WIDGET",
            "FORM",
            "PLACEMENT",
            "IMAGE",
            "DOMAIN_SETTINGS",
            "SITE_SETTINGS",
            "EMAIL_ADDRESS",
            "WORKFLOW",
            "HUBDB_TABLE",
            "REDIRECT_URL",
            "DESIGN_FOLDER",
            "SITE_MAP",
            "DOMAIN",
            "BLOG",
            "FILE",
            "FOLDER",
            "SITE_MENU",
            "THEME",
            "CONTENT_GROUP",
            "FOLLOW_ME",
            "KNOWLEDGE_BASE",
            "LIST_MEMBERSHIP",
            "CONTACT_MEMBERSHIP",
            "PASSWORD_PROTECTED",
            "UNRESTRICTED_ACCESS",
            "MARKETPLACE_LISTING",
            "LAYOUT_SECTION",
            "THEME_SETTINGS",
            "VIDEO_PLAYER",
            "URL_MAPPING",
            "KNOWLEDGE_CATEGORY",
            "KNOWLEDGE_HOMEPAGE_CATEGORY",
            "RAW_ASSET",
            "GLOBAL_CONTENT",
            "HUBDB_TABLE_ROW",
            "BLOG_AUTHOR",
            "SERVERLESS_FUNCTION",
            "KNOWLEDGE_CATEGORY_TRANSLATION",
        ]  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and cos_object_type not in allowed_values
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `cos_object_type` ({}), must be one of {}".format(  # noqa: E501
                    cos_object_type, allowed_values
                )
            )

        self._cos_object_type = cos_object_type

    @property
    def cdn_purge_embargo_time(self):
        """Gets the cdn_purge_embargo_time of this Domain.  # noqa: E501


        :return: The cdn_purge_embargo_time of this Domain.  # noqa: E501
        :rtype: int
        """
        return self._cdn_purge_embargo_time

    @cdn_purge_embargo_time.setter
    def cdn_purge_embargo_time(self, cdn_purge_embargo_time):
        """Sets the cdn_purge_embargo_time of this Domain.


        :param cdn_purge_embargo_time: The cdn_purge_embargo_time of this Domain.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation
            and cdn_purge_embargo_time is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `cdn_purge_embargo_time`, must not be `None`"
            )  # noqa: E501

        self._cdn_purge_embargo_time = cdn_purge_embargo_time

    @property
    def is_staging_domain(self):
        """Gets the is_staging_domain of this Domain.  # noqa: E501


        :return: The is_staging_domain of this Domain.  # noqa: E501
        :rtype: bool
        """
        return self._is_staging_domain

    @is_staging_domain.setter
    def is_staging_domain(self, is_staging_domain):
        """Sets the is_staging_domain of this Domain.


        :param is_staging_domain: The is_staging_domain of this Domain.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and is_staging_domain is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `is_staging_domain`, must not be `None`"
            )  # noqa: E501

        self._is_staging_domain = is_staging_domain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Domain):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Domain):
            return True

        return self.to_dict() != other.to_dict()
