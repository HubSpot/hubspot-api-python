"""
    Domains

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from hubspot.cms.domains.configuration import Configuration


class DomainSetupInfo:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "supports_ssl_externally": "bool",
        "who_is_email_addresses": "list[str]",
    }

    attribute_map = {
        "supports_ssl_externally": "supportsSslExternally",
        "who_is_email_addresses": "whoIsEmailAddresses",
    }

    def __init__(
        self,
        supports_ssl_externally=None,
        who_is_email_addresses=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """DomainSetupInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._supports_ssl_externally = None
        self._who_is_email_addresses = None
        self.discriminator = None

        self.supports_ssl_externally = supports_ssl_externally
        self.who_is_email_addresses = who_is_email_addresses

    @property
    def supports_ssl_externally(self):
        """Gets the supports_ssl_externally of this DomainSetupInfo.  # noqa: E501


        :return: The supports_ssl_externally of this DomainSetupInfo.  # noqa: E501
        :rtype: bool
        """
        return self._supports_ssl_externally

    @supports_ssl_externally.setter
    def supports_ssl_externally(self, supports_ssl_externally):
        """Sets the supports_ssl_externally of this DomainSetupInfo.


        :param supports_ssl_externally: The supports_ssl_externally of this DomainSetupInfo.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and supports_ssl_externally is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `supports_ssl_externally`, must not be `None`"
            )  # noqa: E501

        self._supports_ssl_externally = supports_ssl_externally

    @property
    def who_is_email_addresses(self):
        """Gets the who_is_email_addresses of this DomainSetupInfo.  # noqa: E501


        :return: The who_is_email_addresses of this DomainSetupInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._who_is_email_addresses

    @who_is_email_addresses.setter
    def who_is_email_addresses(self, who_is_email_addresses):
        """Sets the who_is_email_addresses of this DomainSetupInfo.


        :param who_is_email_addresses: The who_is_email_addresses of this DomainSetupInfo.  # noqa: E501
        :type: list[str]
        """
        if (
            self.local_vars_configuration.client_side_validation
            and who_is_email_addresses is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `who_is_email_addresses`, must not be `None`"
            )  # noqa: E501

        self._who_is_email_addresses = who_is_email_addresses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainSetupInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DomainSetupInfo):
            return True

        return self.to_dict() != other.to_dict()
