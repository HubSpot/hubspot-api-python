# coding: utf-8

"""
    Pages

    Use these endpoints for interacting with Landing Pages and Site Pages  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.cms.pages.configuration import Configuration


class ContentLanguageVariation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "archived_in_dashboard": "bool",
        "created": "datetime",
        "tag_ids": "list[int]",
        "publish_date": "datetime",
        "public_access_rules": "list[object]",
        "password": "str",
        "author_name": "str",
        "public_access_rules_enabled": "bool",
        "name": "str",
        "campaign": "str",
        "id": "int",
        "state": "str",
        "updated": "datetime",
        "slug": "str",
    }

    attribute_map = {
        "archived_in_dashboard": "archivedInDashboard",
        "created": "created",
        "tag_ids": "tagIds",
        "publish_date": "publishDate",
        "public_access_rules": "publicAccessRules",
        "password": "password",
        "author_name": "authorName",
        "public_access_rules_enabled": "publicAccessRulesEnabled",
        "name": "name",
        "campaign": "campaign",
        "id": "id",
        "state": "state",
        "updated": "updated",
        "slug": "slug",
    }

    def __init__(
        self,
        archived_in_dashboard=None,
        created=None,
        tag_ids=None,
        publish_date=None,
        public_access_rules=None,
        password=None,
        author_name=None,
        public_access_rules_enabled=None,
        name=None,
        campaign=None,
        id=None,
        state=None,
        updated=None,
        slug=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """ContentLanguageVariation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._archived_in_dashboard = None
        self._created = None
        self._tag_ids = None
        self._publish_date = None
        self._public_access_rules = None
        self._password = None
        self._author_name = None
        self._public_access_rules_enabled = None
        self._name = None
        self._campaign = None
        self._id = None
        self._state = None
        self._updated = None
        self._slug = None
        self.discriminator = None

        self.archived_in_dashboard = archived_in_dashboard
        self.created = created
        if tag_ids is not None:
            self.tag_ids = tag_ids
        self.publish_date = publish_date
        self.public_access_rules = public_access_rules
        self.password = password
        self.author_name = author_name
        self.public_access_rules_enabled = public_access_rules_enabled
        self.name = name
        self.campaign = campaign
        self.id = id
        self.state = state
        self.updated = updated
        self.slug = slug

    @property
    def archived_in_dashboard(self):
        """Gets the archived_in_dashboard of this ContentLanguageVariation.  # noqa: E501


        :return: The archived_in_dashboard of this ContentLanguageVariation.  # noqa: E501
        :rtype: bool
        """
        return self._archived_in_dashboard

    @archived_in_dashboard.setter
    def archived_in_dashboard(self, archived_in_dashboard):
        """Sets the archived_in_dashboard of this ContentLanguageVariation.


        :param archived_in_dashboard: The archived_in_dashboard of this ContentLanguageVariation.  # noqa: E501
        :type archived_in_dashboard: bool
        """
        if self.local_vars_configuration.client_side_validation and archived_in_dashboard is None:  # noqa: E501
            raise ValueError("Invalid value for `archived_in_dashboard`, must not be `None`")  # noqa: E501

        self._archived_in_dashboard = archived_in_dashboard

    @property
    def created(self):
        """Gets the created of this ContentLanguageVariation.  # noqa: E501


        :return: The created of this ContentLanguageVariation.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ContentLanguageVariation.


        :param created: The created of this ContentLanguageVariation.  # noqa: E501
        :type created: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def tag_ids(self):
        """Gets the tag_ids of this ContentLanguageVariation.  # noqa: E501


        :return: The tag_ids of this ContentLanguageVariation.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this ContentLanguageVariation.


        :param tag_ids: The tag_ids of this ContentLanguageVariation.  # noqa: E501
        :type tag_ids: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def publish_date(self):
        """Gets the publish_date of this ContentLanguageVariation.  # noqa: E501


        :return: The publish_date of this ContentLanguageVariation.  # noqa: E501
        :rtype: datetime
        """
        return self._publish_date

    @publish_date.setter
    def publish_date(self, publish_date):
        """Sets the publish_date of this ContentLanguageVariation.


        :param publish_date: The publish_date of this ContentLanguageVariation.  # noqa: E501
        :type publish_date: datetime
        """
        if self.local_vars_configuration.client_side_validation and publish_date is None:  # noqa: E501
            raise ValueError("Invalid value for `publish_date`, must not be `None`")  # noqa: E501

        self._publish_date = publish_date

    @property
    def public_access_rules(self):
        """Gets the public_access_rules of this ContentLanguageVariation.  # noqa: E501


        :return: The public_access_rules of this ContentLanguageVariation.  # noqa: E501
        :rtype: list[object]
        """
        return self._public_access_rules

    @public_access_rules.setter
    def public_access_rules(self, public_access_rules):
        """Sets the public_access_rules of this ContentLanguageVariation.


        :param public_access_rules: The public_access_rules of this ContentLanguageVariation.  # noqa: E501
        :type public_access_rules: list[object]
        """
        if self.local_vars_configuration.client_side_validation and public_access_rules is None:  # noqa: E501
            raise ValueError("Invalid value for `public_access_rules`, must not be `None`")  # noqa: E501

        self._public_access_rules = public_access_rules

    @property
    def password(self):
        """Gets the password of this ContentLanguageVariation.  # noqa: E501


        :return: The password of this ContentLanguageVariation.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ContentLanguageVariation.


        :param password: The password of this ContentLanguageVariation.  # noqa: E501
        :type password: str
        """
        if self.local_vars_configuration.client_side_validation and password is None:  # noqa: E501
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def author_name(self):
        """Gets the author_name of this ContentLanguageVariation.  # noqa: E501


        :return: The author_name of this ContentLanguageVariation.  # noqa: E501
        :rtype: str
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this ContentLanguageVariation.


        :param author_name: The author_name of this ContentLanguageVariation.  # noqa: E501
        :type author_name: str
        """
        if self.local_vars_configuration.client_side_validation and author_name is None:  # noqa: E501
            raise ValueError("Invalid value for `author_name`, must not be `None`")  # noqa: E501

        self._author_name = author_name

    @property
    def public_access_rules_enabled(self):
        """Gets the public_access_rules_enabled of this ContentLanguageVariation.  # noqa: E501


        :return: The public_access_rules_enabled of this ContentLanguageVariation.  # noqa: E501
        :rtype: bool
        """
        return self._public_access_rules_enabled

    @public_access_rules_enabled.setter
    def public_access_rules_enabled(self, public_access_rules_enabled):
        """Sets the public_access_rules_enabled of this ContentLanguageVariation.


        :param public_access_rules_enabled: The public_access_rules_enabled of this ContentLanguageVariation.  # noqa: E501
        :type public_access_rules_enabled: bool
        """
        if self.local_vars_configuration.client_side_validation and public_access_rules_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `public_access_rules_enabled`, must not be `None`")  # noqa: E501

        self._public_access_rules_enabled = public_access_rules_enabled

    @property
    def name(self):
        """Gets the name of this ContentLanguageVariation.  # noqa: E501


        :return: The name of this ContentLanguageVariation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContentLanguageVariation.


        :param name: The name of this ContentLanguageVariation.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def campaign(self):
        """Gets the campaign of this ContentLanguageVariation.  # noqa: E501


        :return: The campaign of this ContentLanguageVariation.  # noqa: E501
        :rtype: str
        """
        return self._campaign

    @campaign.setter
    def campaign(self, campaign):
        """Sets the campaign of this ContentLanguageVariation.


        :param campaign: The campaign of this ContentLanguageVariation.  # noqa: E501
        :type campaign: str
        """
        if self.local_vars_configuration.client_side_validation and campaign is None:  # noqa: E501
            raise ValueError("Invalid value for `campaign`, must not be `None`")  # noqa: E501

        self._campaign = campaign

    @property
    def id(self):
        """Gets the id of this ContentLanguageVariation.  # noqa: E501


        :return: The id of this ContentLanguageVariation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContentLanguageVariation.


        :param id: The id of this ContentLanguageVariation.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def state(self):
        """Gets the state of this ContentLanguageVariation.  # noqa: E501


        :return: The state of this ContentLanguageVariation.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ContentLanguageVariation.


        :param state: The state of this ContentLanguageVariation.  # noqa: E501
        :type state: str
        """
        if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def updated(self):
        """Gets the updated of this ContentLanguageVariation.  # noqa: E501


        :return: The updated of this ContentLanguageVariation.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ContentLanguageVariation.


        :param updated: The updated of this ContentLanguageVariation.  # noqa: E501
        :type updated: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated is None:  # noqa: E501
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    @property
    def slug(self):
        """Gets the slug of this ContentLanguageVariation.  # noqa: E501


        :return: The slug of this ContentLanguageVariation.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this ContentLanguageVariation.


        :param slug: The slug of this ContentLanguageVariation.  # noqa: E501
        :type slug: str
        """
        if self.local_vars_configuration.client_side_validation and slug is None:  # noqa: E501
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentLanguageVariation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContentLanguageVariation):
            return True

        return self.to_dict() != other.to_dict()
