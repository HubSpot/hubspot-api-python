# coding: utf-8

"""
    Pages

    Use these endpoints for interacting with Landing Pages and Site Pages  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.cms.pages.configuration import Configuration


class ContentFolder(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"deleted_at": "datetime", "parent_folder_id": "int", "created": "datetime", "name": "str", "id": "str", "category": "int", "updated": "datetime"}

    attribute_map = {"deleted_at": "deletedAt", "parent_folder_id": "parentFolderId", "created": "created", "name": "name", "id": "id", "category": "category", "updated": "updated"}

    def __init__(self, deleted_at=None, parent_folder_id=None, created=None, name=None, id=None, category=None, updated=None, local_vars_configuration=None):  # noqa: E501
        """ContentFolder - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._deleted_at = None
        self._parent_folder_id = None
        self._created = None
        self._name = None
        self._id = None
        self._category = None
        self._updated = None
        self.discriminator = None

        self.deleted_at = deleted_at
        self.parent_folder_id = parent_folder_id
        self.created = created
        self.name = name
        self.id = id
        self.category = category
        self.updated = updated

    @property
    def deleted_at(self):
        """Gets the deleted_at of this ContentFolder.  # noqa: E501

        The timestamp (ISO8601 format) when this content folder was deleted.  # noqa: E501

        :return: The deleted_at of this ContentFolder.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this ContentFolder.

        The timestamp (ISO8601 format) when this content folder was deleted.  # noqa: E501

        :param deleted_at: The deleted_at of this ContentFolder.  # noqa: E501
        :type deleted_at: datetime
        """
        if self.local_vars_configuration.client_side_validation and deleted_at is None:  # noqa: E501
            raise ValueError("Invalid value for `deleted_at`, must not be `None`")  # noqa: E501

        self._deleted_at = deleted_at

    @property
    def parent_folder_id(self):
        """Gets the parent_folder_id of this ContentFolder.  # noqa: E501

        The ID of the content folder this folder is nested under  # noqa: E501

        :return: The parent_folder_id of this ContentFolder.  # noqa: E501
        :rtype: int
        """
        return self._parent_folder_id

    @parent_folder_id.setter
    def parent_folder_id(self, parent_folder_id):
        """Sets the parent_folder_id of this ContentFolder.

        The ID of the content folder this folder is nested under  # noqa: E501

        :param parent_folder_id: The parent_folder_id of this ContentFolder.  # noqa: E501
        :type parent_folder_id: int
        """
        if self.local_vars_configuration.client_side_validation and parent_folder_id is None:  # noqa: E501
            raise ValueError("Invalid value for `parent_folder_id`, must not be `None`")  # noqa: E501

        self._parent_folder_id = parent_folder_id

    @property
    def created(self):
        """Gets the created of this ContentFolder.  # noqa: E501


        :return: The created of this ContentFolder.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ContentFolder.


        :param created: The created of this ContentFolder.  # noqa: E501
        :type created: datetime
        """
        if self.local_vars_configuration.client_side_validation and created is None:  # noqa: E501
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def name(self):
        """Gets the name of this ContentFolder.  # noqa: E501

        The name of the folder which will show up in the app dashboard  # noqa: E501

        :return: The name of this ContentFolder.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContentFolder.

        The name of the folder which will show up in the app dashboard  # noqa: E501

        :param name: The name of this ContentFolder.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def id(self):
        """Gets the id of this ContentFolder.  # noqa: E501

        The unique ID of the content folder.  # noqa: E501

        :return: The id of this ContentFolder.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContentFolder.

        The unique ID of the content folder.  # noqa: E501

        :param id: The id of this ContentFolder.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def category(self):
        """Gets the category of this ContentFolder.  # noqa: E501

        The type of object this folder applies to. Should always be LANDING_PAGE.  # noqa: E501

        :return: The category of this ContentFolder.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ContentFolder.

        The type of object this folder applies to. Should always be LANDING_PAGE.  # noqa: E501

        :param category: The category of this ContentFolder.  # noqa: E501
        :type category: int
        """
        if self.local_vars_configuration.client_side_validation and category is None:  # noqa: E501
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def updated(self):
        """Gets the updated of this ContentFolder.  # noqa: E501


        :return: The updated of this ContentFolder.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ContentFolder.


        :param updated: The updated of this ContentFolder.  # noqa: E501
        :type updated: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated is None:  # noqa: E501
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContentFolder):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContentFolder):
            return True

        return self.to_dict() != other.to_dict()
