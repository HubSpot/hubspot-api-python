"""
    CMS Site Search

    Use these endpoints for searching content on your HubSpot hosted CMS website(s).  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from hubspot.cms.site_search.configuration import Configuration


class SearchHitField:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "metadata_field": "bool",
        "values": "list",
        "name": "str",
        "value": "object",
    }

    attribute_map = {
        "metadata_field": "metadataField",
        "values": "values",
        "name": "name",
        "value": "value",
    }

    def __init__(
        self,
        metadata_field=None,
        values=None,
        name=None,
        value=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """SearchHitField - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._metadata_field = None
        self._values = None
        self._name = None
        self._value = None
        self.discriminator = None

        self.metadata_field = metadata_field
        self.values = values
        self.name = name
        self.value = value

    @property
    def metadata_field(self):
        """Gets the metadata_field of this SearchHitField.  # noqa: E501


        :return: The metadata_field of this SearchHitField.  # noqa: E501
        :rtype: bool
        """
        return self._metadata_field

    @metadata_field.setter
    def metadata_field(self, metadata_field):
        """Sets the metadata_field of this SearchHitField.


        :param metadata_field: The metadata_field of this SearchHitField.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and metadata_field is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `metadata_field`, must not be `None`"
            )  # noqa: E501

        self._metadata_field = metadata_field

    @property
    def values(self):
        """Gets the values of this SearchHitField.  # noqa: E501


        :return: The values of this SearchHitField.  # noqa: E501
        :rtype: list
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this SearchHitField.


        :param values: The values of this SearchHitField.  # noqa: E501
        :type: list
        """
        if (
            self.local_vars_configuration.client_side_validation and values is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `values`, must not be `None`"
            )  # noqa: E501

        self._values = values

    @property
    def name(self):
        """Gets the name of this SearchHitField.  # noqa: E501


        :return: The name of this SearchHitField.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchHitField.


        :param name: The name of this SearchHitField.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and name is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def value(self):
        """Gets the value of this SearchHitField.  # noqa: E501


        :return: The value of this SearchHitField.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SearchHitField.


        :param value: The value of this SearchHitField.  # noqa: E501
        :type: object
        """
        if (
            self.local_vars_configuration.client_side_validation and value is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `value`, must not be `None`"
            )  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchHitField):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchHitField):
            return True

        return self.to_dict() != other.to_dict()
