# coding: utf-8

"""
    Blog Post endpoints

    Use these endpoints for interacting with Blog Posts, Blog Authors, and Blog Tags  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from hubspot.cms.blogs.blog_posts.configuration import Configuration


class SideOrCorner(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'vertical_side': 'str',
        'horizontal_side': 'str'
    }

    attribute_map = {
        'vertical_side': 'verticalSide',
        'horizontal_side': 'horizontalSide'
    }

    def __init__(self, vertical_side=None, horizontal_side=None, local_vars_configuration=None):  # noqa: E501
        """SideOrCorner - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._vertical_side = None
        self._horizontal_side = None
        self.discriminator = None

        self.vertical_side = vertical_side
        self.horizontal_side = horizontal_side

    @property
    def vertical_side(self):
        """Gets the vertical_side of this SideOrCorner.  # noqa: E501


        :return: The vertical_side of this SideOrCorner.  # noqa: E501
        :rtype: str
        """
        return self._vertical_side

    @vertical_side.setter
    def vertical_side(self, vertical_side):
        """Sets the vertical_side of this SideOrCorner.


        :param vertical_side: The vertical_side of this SideOrCorner.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and vertical_side is None:  # noqa: E501
            raise ValueError("Invalid value for `vertical_side`, must not be `None`")  # noqa: E501
        allowed_values = ["TOP", "MIDDLE", "BOTTOM"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and vertical_side not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `vertical_side` ({0}), must be one of {1}"  # noqa: E501
                .format(vertical_side, allowed_values)
            )

        self._vertical_side = vertical_side

    @property
    def horizontal_side(self):
        """Gets the horizontal_side of this SideOrCorner.  # noqa: E501


        :return: The horizontal_side of this SideOrCorner.  # noqa: E501
        :rtype: str
        """
        return self._horizontal_side

    @horizontal_side.setter
    def horizontal_side(self, horizontal_side):
        """Sets the horizontal_side of this SideOrCorner.


        :param horizontal_side: The horizontal_side of this SideOrCorner.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and horizontal_side is None:  # noqa: E501
            raise ValueError("Invalid value for `horizontal_side`, must not be `None`")  # noqa: E501
        allowed_values = ["LEFT", "CENTER", "RIGHT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and horizontal_side not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `horizontal_side` ({0}), must be one of {1}"  # noqa: E501
                .format(horizontal_side, allowed_values)
            )

        self._horizontal_side = horizontal_side

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SideOrCorner):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SideOrCorner):
            return True

        return self.to_dict() != other.to_dict()
