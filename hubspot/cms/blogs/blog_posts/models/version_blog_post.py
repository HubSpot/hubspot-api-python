"""
    Blog Post endpoints

    \"Use these endpoints for interacting with Blog Posts, Blog Authors, and Blog Tags\"  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from hubspot.cms.blogs.blog_posts.configuration import Configuration


class VersionBlogPost:
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "object": "BlogPost",
        "user": "VersionUser",
        "id": "str",
        "updated": "datetime",
    }

    attribute_map = {
        "object": "object",
        "user": "user",
        "id": "id",
        "updated": "updated",
    }

    def __init__(
        self,
        object=None,
        user=None,
        id=None,
        updated=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """VersionBlogPost - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._object = None
        self._user = None
        self._id = None
        self._updated = None
        self.discriminator = None

        self.object = object
        self.user = user
        self.id = id
        self.updated = updated

    @property
    def object(self):
        """Gets the object of this VersionBlogPost.  # noqa: E501


        :return: The object of this VersionBlogPost.  # noqa: E501
        :rtype: BlogPost
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this VersionBlogPost.


        :param object: The object of this VersionBlogPost.  # noqa: E501
        :type: BlogPost
        """
        if (
            self.local_vars_configuration.client_side_validation and object is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `object`, must not be `None`"
            )  # noqa: E501

        self._object = object

    @property
    def user(self):
        """Gets the user of this VersionBlogPost.  # noqa: E501


        :return: The user of this VersionBlogPost.  # noqa: E501
        :rtype: VersionUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this VersionBlogPost.


        :param user: The user of this VersionBlogPost.  # noqa: E501
        :type: VersionUser
        """
        if (
            self.local_vars_configuration.client_side_validation and user is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `user`, must not be `None`"
            )  # noqa: E501

        self._user = user

    @property
    def id(self):
        """Gets the id of this VersionBlogPost.  # noqa: E501

        The id of the version.  # noqa: E501

        :return: The id of this VersionBlogPost.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VersionBlogPost.

        The id of the version.  # noqa: E501

        :param id: The id of this VersionBlogPost.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and id is None
        ):  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def updated(self):
        """Gets the updated of this VersionBlogPost.  # noqa: E501

        The timestamp (ISO8601 format) when this version was updated.  # noqa: E501

        :return: The updated of this VersionBlogPost.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this VersionBlogPost.

        The timestamp (ISO8601 format) when this version was updated.  # noqa: E501

        :param updated: The updated of this VersionBlogPost.  # noqa: E501
        :type: datetime
        """
        if (
            self.local_vars_configuration.client_side_validation and updated is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `updated`, must not be `None`"
            )  # noqa: E501

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in self.openapi_types.items():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VersionBlogPost):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VersionBlogPost):
            return True

        return self.to_dict() != other.to_dict()
