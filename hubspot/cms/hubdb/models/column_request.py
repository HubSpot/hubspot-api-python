# coding: utf-8

"""
    HubDB endpoints

    HubDB is a relational data store that presents data as rows, columns, and cells in a table, much like a spreadsheet. HubDB tables can be added or modified [in the HubSpot CMS](https://knowledge.hubspot.com/cos-general/how-to-edit-hubdb-tables), but you can also use the API endpoints documented here. For more information on HubDB tables and using their data on a HubSpot site, see the [CMS developers site](https://designers.hubspot.com/docs/tools/hubdb). You can also see the [documentation for dynamic pages](https://designers.hubspot.com/docs/tutorials/how-to-build-dynamic-pages-with-hubdb) for more details about the `useForPages` field.  HubDB tables support `draft` and `published` versions. This allows you to update data in the table, either for testing or to allow for a manual approval process, without affecting any live pages using the existing data. Draft data can be reviewed, and published by a user working in HubSpot or published via the API. Draft data can also be discarded, allowing users to go back to the published version of the data without disrupting it. If a table is set to be `allowed for public access`, you can access the published version of the table and rows without any authentication by specifying the portal id via the query parameter `portalId`.  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from hubspot.cms.hubdb.configuration import Configuration


class ColumnRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "id": "int",
        "name": "str",
        "label": "str",
        "type": "str",
        "options": "list[Option]",
        "foreign_table_id": "int",
        "foreign_column_id": "int",
    }

    attribute_map = {
        "id": "id",
        "name": "name",
        "label": "label",
        "type": "type",
        "options": "options",
        "foreign_table_id": "foreignTableId",
        "foreign_column_id": "foreignColumnId",
    }

    def __init__(
        self,
        id=None,
        name=None,
        label=None,
        type=None,
        options=None,
        foreign_table_id=None,
        foreign_column_id=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """ColumnRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._label = None
        self._type = None
        self._options = None
        self._foreign_table_id = None
        self._foreign_column_id = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.label = label
        self.type = type
        self.options = options
        if foreign_table_id is not None:
            self.foreign_table_id = foreign_table_id
        if foreign_column_id is not None:
            self.foreign_column_id = foreign_column_id

    @property
    def id(self):
        """Gets the id of this ColumnRequest.  # noqa: E501

        Column Id  # noqa: E501

        :return: The id of this ColumnRequest.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ColumnRequest.

        Column Id  # noqa: E501

        :param id: The id of this ColumnRequest.  # noqa: E501
        :type: int
        """
        if (
            self.local_vars_configuration.client_side_validation and id is None
        ):  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ColumnRequest.  # noqa: E501

        Name of the column  # noqa: E501

        :return: The name of this ColumnRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ColumnRequest.

        Name of the column  # noqa: E501

        :param name: The name of this ColumnRequest.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and name is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def label(self):
        """Gets the label of this ColumnRequest.  # noqa: E501

        Label of the column  # noqa: E501

        :return: The label of this ColumnRequest.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ColumnRequest.

        Label of the column  # noqa: E501

        :param label: The label of this ColumnRequest.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and label is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `label`, must not be `None`"
            )  # noqa: E501

        self._label = label

    @property
    def type(self):
        """Gets the type of this ColumnRequest.  # noqa: E501

        Type of the column  # noqa: E501

        :return: The type of this ColumnRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ColumnRequest.

        Type of the column  # noqa: E501

        :param type: The type of this ColumnRequest.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and type is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `type`, must not be `None`"
            )  # noqa: E501
        allowed_values = [
            "NULL",
            "TEXT",
            "NUMBER",
            "URL",
            "IMAGE",
            "SELECT",
            "MULTISELECT",
            "BOOLEAN",
            "LOCATION",
            "DATE",
            "DATETIME",
            "CURRENCY",
            "RICHTEXT",
            "FOREIGN_ID",
            "VIDEO",
            "CTA",
            "FILE",
        ]  # noqa: E501
        if (
            self.local_vars_configuration.client_side_validation
            and type not in allowed_values
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}".format(  # noqa: E501
                    type, allowed_values
                )
            )

        self._type = type

    @property
    def options(self):
        """Gets the options of this ColumnRequest.  # noqa: E501

        Options to choose for select and multi-select columns  # noqa: E501

        :return: The options of this ColumnRequest.  # noqa: E501
        :rtype: list[Option]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ColumnRequest.

        Options to choose for select and multi-select columns  # noqa: E501

        :param options: The options of this ColumnRequest.  # noqa: E501
        :type: list[Option]
        """
        if (
            self.local_vars_configuration.client_side_validation and options is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `options`, must not be `None`"
            )  # noqa: E501

        self._options = options

    @property
    def foreign_table_id(self):
        """Gets the foreign_table_id of this ColumnRequest.  # noqa: E501

        The id of another table to which the column refers/points to.  # noqa: E501

        :return: The foreign_table_id of this ColumnRequest.  # noqa: E501
        :rtype: int
        """
        return self._foreign_table_id

    @foreign_table_id.setter
    def foreign_table_id(self, foreign_table_id):
        """Sets the foreign_table_id of this ColumnRequest.

        The id of another table to which the column refers/points to.  # noqa: E501

        :param foreign_table_id: The foreign_table_id of this ColumnRequest.  # noqa: E501
        :type: int
        """

        self._foreign_table_id = foreign_table_id

    @property
    def foreign_column_id(self):
        """Gets the foreign_column_id of this ColumnRequest.  # noqa: E501

        The id of the column from another table to which the column refers/points to.  # noqa: E501

        :return: The foreign_column_id of this ColumnRequest.  # noqa: E501
        :rtype: int
        """
        return self._foreign_column_id

    @foreign_column_id.setter
    def foreign_column_id(self, foreign_column_id):
        """Sets the foreign_column_id of this ColumnRequest.

        The id of the column from another table to which the column refers/points to.  # noqa: E501

        :param foreign_column_id: The foreign_column_id of this ColumnRequest.  # noqa: E501
        :type: int
        """

        self._foreign_column_id = foreign_column_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ColumnRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ColumnRequest):
            return True

        return self.to_dict() != other.to_dict()
