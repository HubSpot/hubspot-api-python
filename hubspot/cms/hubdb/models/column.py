# coding: utf-8

"""
    Hubdb

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.cms.hubdb.configuration import Configuration


class Column(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "created_by_user_id": "int",
        "foreign_table_id": "int",
        "updated_by": "SimpleUser",
        "description": "str",
        "label": "str",
        "updated_by_user_id": "int",
        "type": "str",
        "option_count": "int",
        "foreign_ids": "list[ForeignId]",
        "created_at": "datetime",
        "deleted": "bool",
        "created_by": "SimpleUser",
        "name": "str",
        "options": "list[Option]",
        "width": "int",
        "id": "str",
        "foreign_ids_by_id": "dict[str, ForeignId]",
        "foreign_column_id": "int",
        "foreign_ids_by_name": "dict[str, ForeignId]",
        "updated_at": "datetime",
    }

    attribute_map = {
        "created_by_user_id": "createdByUserId",
        "foreign_table_id": "foreignTableId",
        "updated_by": "updatedBy",
        "description": "description",
        "label": "label",
        "updated_by_user_id": "updatedByUserId",
        "type": "type",
        "option_count": "optionCount",
        "foreign_ids": "foreignIds",
        "created_at": "createdAt",
        "deleted": "deleted",
        "created_by": "createdBy",
        "name": "name",
        "options": "options",
        "width": "width",
        "id": "id",
        "foreign_ids_by_id": "foreignIdsById",
        "foreign_column_id": "foreignColumnId",
        "foreign_ids_by_name": "foreignIdsByName",
        "updated_at": "updatedAt",
    }

    def __init__(
        self,
        created_by_user_id=None,
        foreign_table_id=None,
        updated_by=None,
        description=None,
        label=None,
        updated_by_user_id=None,
        type=None,
        option_count=None,
        foreign_ids=None,
        created_at=None,
        deleted=None,
        created_by=None,
        name=None,
        options=None,
        width=None,
        id=None,
        foreign_ids_by_id=None,
        foreign_column_id=None,
        foreign_ids_by_name=None,
        updated_at=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """Column - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_by_user_id = None
        self._foreign_table_id = None
        self._updated_by = None
        self._description = None
        self._label = None
        self._updated_by_user_id = None
        self._type = None
        self._option_count = None
        self._foreign_ids = None
        self._created_at = None
        self._deleted = None
        self._created_by = None
        self._name = None
        self._options = None
        self._width = None
        self._id = None
        self._foreign_ids_by_id = None
        self._foreign_column_id = None
        self._foreign_ids_by_name = None
        self._updated_at = None
        self.discriminator = None

        if created_by_user_id is not None:
            self.created_by_user_id = created_by_user_id
        if foreign_table_id is not None:
            self.foreign_table_id = foreign_table_id
        if updated_by is not None:
            self.updated_by = updated_by
        if description is not None:
            self.description = description
        self.label = label
        if updated_by_user_id is not None:
            self.updated_by_user_id = updated_by_user_id
        self.type = type
        if option_count is not None:
            self.option_count = option_count
        if foreign_ids is not None:
            self.foreign_ids = foreign_ids
        if created_at is not None:
            self.created_at = created_at
        if deleted is not None:
            self.deleted = deleted
        if created_by is not None:
            self.created_by = created_by
        self.name = name
        if options is not None:
            self.options = options
        if width is not None:
            self.width = width
        if id is not None:
            self.id = id
        if foreign_ids_by_id is not None:
            self.foreign_ids_by_id = foreign_ids_by_id
        if foreign_column_id is not None:
            self.foreign_column_id = foreign_column_id
        if foreign_ids_by_name is not None:
            self.foreign_ids_by_name = foreign_ids_by_name
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def created_by_user_id(self):
        """Gets the created_by_user_id of this Column.  # noqa: E501


        :return: The created_by_user_id of this Column.  # noqa: E501
        :rtype: int
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """Sets the created_by_user_id of this Column.


        :param created_by_user_id: The created_by_user_id of this Column.  # noqa: E501
        :type created_by_user_id: int
        """

        self._created_by_user_id = created_by_user_id

    @property
    def foreign_table_id(self):
        """Gets the foreign_table_id of this Column.  # noqa: E501

        Foreign table id referenced  # noqa: E501

        :return: The foreign_table_id of this Column.  # noqa: E501
        :rtype: int
        """
        return self._foreign_table_id

    @foreign_table_id.setter
    def foreign_table_id(self, foreign_table_id):
        """Sets the foreign_table_id of this Column.

        Foreign table id referenced  # noqa: E501

        :param foreign_table_id: The foreign_table_id of this Column.  # noqa: E501
        :type foreign_table_id: int
        """

        self._foreign_table_id = foreign_table_id

    @property
    def updated_by(self):
        """Gets the updated_by of this Column.  # noqa: E501


        :return: The updated_by of this Column.  # noqa: E501
        :rtype: SimpleUser
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Column.


        :param updated_by: The updated_by of this Column.  # noqa: E501
        :type updated_by: SimpleUser
        """

        self._updated_by = updated_by

    @property
    def description(self):
        """Gets the description of this Column.  # noqa: E501


        :return: The description of this Column.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Column.


        :param description: The description of this Column.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def label(self):
        """Gets the label of this Column.  # noqa: E501

        Label of the column  # noqa: E501

        :return: The label of this Column.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Column.

        Label of the column  # noqa: E501

        :param label: The label of this Column.  # noqa: E501
        :type label: str
        """
        if self.local_vars_configuration.client_side_validation and label is None:  # noqa: E501
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def updated_by_user_id(self):
        """Gets the updated_by_user_id of this Column.  # noqa: E501


        :return: The updated_by_user_id of this Column.  # noqa: E501
        :rtype: int
        """
        return self._updated_by_user_id

    @updated_by_user_id.setter
    def updated_by_user_id(self, updated_by_user_id):
        """Sets the updated_by_user_id of this Column.


        :param updated_by_user_id: The updated_by_user_id of this Column.  # noqa: E501
        :type updated_by_user_id: int
        """

        self._updated_by_user_id = updated_by_user_id

    @property
    def type(self):
        """Gets the type of this Column.  # noqa: E501

        Type of the column  # noqa: E501

        :return: The type of this Column.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Column.

        Type of the column  # noqa: E501

        :param type: The type of this Column.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = [
            "NULL",
            "TEXT",
            "NUMBER",
            "URL",
            "IMAGE",
            "SELECT",
            "MULTISELECT",
            "BOOLEAN",
            "LOCATION",
            "DATE",
            "DATETIME",
            "CURRENCY",
            "RICHTEXT",
            "FOREIGN_ID",
            "VIDEO",
            "CTA",
            "FILE",
            "JSON",
            "COMPOSITE",
            "CODE",
        ]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError("Invalid value for `type` ({0}), must be one of {1}".format(type, allowed_values))  # noqa: E501

        self._type = type

    @property
    def option_count(self):
        """Gets the option_count of this Column.  # noqa: E501

        Number of options available  # noqa: E501

        :return: The option_count of this Column.  # noqa: E501
        :rtype: int
        """
        return self._option_count

    @option_count.setter
    def option_count(self, option_count):
        """Sets the option_count of this Column.

        Number of options available  # noqa: E501

        :param option_count: The option_count of this Column.  # noqa: E501
        :type option_count: int
        """

        self._option_count = option_count

    @property
    def foreign_ids(self):
        """Gets the foreign_ids of this Column.  # noqa: E501

        Foreign Ids  # noqa: E501

        :return: The foreign_ids of this Column.  # noqa: E501
        :rtype: list[ForeignId]
        """
        return self._foreign_ids

    @foreign_ids.setter
    def foreign_ids(self, foreign_ids):
        """Sets the foreign_ids of this Column.

        Foreign Ids  # noqa: E501

        :param foreign_ids: The foreign_ids of this Column.  # noqa: E501
        :type foreign_ids: list[ForeignId]
        """

        self._foreign_ids = foreign_ids

    @property
    def created_at(self):
        """Gets the created_at of this Column.  # noqa: E501


        :return: The created_at of this Column.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Column.


        :param created_at: The created_at of this Column.  # noqa: E501
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def deleted(self):
        """Gets the deleted of this Column.  # noqa: E501


        :return: The deleted of this Column.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Column.


        :param deleted: The deleted of this Column.  # noqa: E501
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def created_by(self):
        """Gets the created_by of this Column.  # noqa: E501


        :return: The created_by of this Column.  # noqa: E501
        :rtype: SimpleUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Column.


        :param created_by: The created_by of this Column.  # noqa: E501
        :type created_by: SimpleUser
        """

        self._created_by = created_by

    @property
    def name(self):
        """Gets the name of this Column.  # noqa: E501

        Name of the column  # noqa: E501

        :return: The name of this Column.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Column.

        Name of the column  # noqa: E501

        :param name: The name of this Column.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def options(self):
        """Gets the options of this Column.  # noqa: E501

        Options to choose for select and multi-select columns  # noqa: E501

        :return: The options of this Column.  # noqa: E501
        :rtype: list[Option]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Column.

        Options to choose for select and multi-select columns  # noqa: E501

        :param options: The options of this Column.  # noqa: E501
        :type options: list[Option]
        """

        self._options = options

    @property
    def width(self):
        """Gets the width of this Column.  # noqa: E501

        Column width for HubDB UI  # noqa: E501

        :return: The width of this Column.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Column.

        Column width for HubDB UI  # noqa: E501

        :param width: The width of this Column.  # noqa: E501
        :type width: int
        """

        self._width = width

    @property
    def id(self):
        """Gets the id of this Column.  # noqa: E501

        Column Id  # noqa: E501

        :return: The id of this Column.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Column.

        Column Id  # noqa: E501

        :param id: The id of this Column.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def foreign_ids_by_id(self):
        """Gets the foreign_ids_by_id of this Column.  # noqa: E501

        Foreign ids  # noqa: E501

        :return: The foreign_ids_by_id of this Column.  # noqa: E501
        :rtype: dict[str, ForeignId]
        """
        return self._foreign_ids_by_id

    @foreign_ids_by_id.setter
    def foreign_ids_by_id(self, foreign_ids_by_id):
        """Sets the foreign_ids_by_id of this Column.

        Foreign ids  # noqa: E501

        :param foreign_ids_by_id: The foreign_ids_by_id of this Column.  # noqa: E501
        :type foreign_ids_by_id: dict[str, ForeignId]
        """

        self._foreign_ids_by_id = foreign_ids_by_id

    @property
    def foreign_column_id(self):
        """Gets the foreign_column_id of this Column.  # noqa: E501

        Foreign Column id  # noqa: E501

        :return: The foreign_column_id of this Column.  # noqa: E501
        :rtype: int
        """
        return self._foreign_column_id

    @foreign_column_id.setter
    def foreign_column_id(self, foreign_column_id):
        """Sets the foreign_column_id of this Column.

        Foreign Column id  # noqa: E501

        :param foreign_column_id: The foreign_column_id of this Column.  # noqa: E501
        :type foreign_column_id: int
        """

        self._foreign_column_id = foreign_column_id

    @property
    def foreign_ids_by_name(self):
        """Gets the foreign_ids_by_name of this Column.  # noqa: E501

        Foreign ids by name  # noqa: E501

        :return: The foreign_ids_by_name of this Column.  # noqa: E501
        :rtype: dict[str, ForeignId]
        """
        return self._foreign_ids_by_name

    @foreign_ids_by_name.setter
    def foreign_ids_by_name(self, foreign_ids_by_name):
        """Sets the foreign_ids_by_name of this Column.

        Foreign ids by name  # noqa: E501

        :param foreign_ids_by_name: The foreign_ids_by_name of this Column.  # noqa: E501
        :type foreign_ids_by_name: dict[str, ForeignId]
        """

        self._foreign_ids_by_name = foreign_ids_by_name

    @property
    def updated_at(self):
        """Gets the updated_at of this Column.  # noqa: E501


        :return: The updated_at of this Column.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Column.


        :param updated_at: The updated_at of this Column.  # noqa: E501
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Column):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Column):
            return True

        return self.to_dict() != other.to_dict()
