# coding: utf-8

"""
    Hubdb

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.cms.hubdb.configuration import Configuration


class ImportResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"row_limit_exceeded": "bool", "duplicate_rows": "int", "rows_imported": "int", "errors": "list[Error]"}

    attribute_map = {"row_limit_exceeded": "rowLimitExceeded", "duplicate_rows": "duplicateRows", "rows_imported": "rowsImported", "errors": "errors"}

    def __init__(self, row_limit_exceeded=None, duplicate_rows=None, rows_imported=None, errors=None, local_vars_configuration=None):  # noqa: E501
        """ImportResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._row_limit_exceeded = None
        self._duplicate_rows = None
        self._rows_imported = None
        self._errors = None
        self.discriminator = None

        self.row_limit_exceeded = row_limit_exceeded
        self.duplicate_rows = duplicate_rows
        self.rows_imported = rows_imported
        self.errors = errors

    @property
    def row_limit_exceeded(self):
        """Gets the row_limit_exceeded of this ImportResult.  # noqa: E501

        Specifies whether row limit exceeded during import  # noqa: E501

        :return: The row_limit_exceeded of this ImportResult.  # noqa: E501
        :rtype: bool
        """
        return self._row_limit_exceeded

    @row_limit_exceeded.setter
    def row_limit_exceeded(self, row_limit_exceeded):
        """Sets the row_limit_exceeded of this ImportResult.

        Specifies whether row limit exceeded during import  # noqa: E501

        :param row_limit_exceeded: The row_limit_exceeded of this ImportResult.  # noqa: E501
        :type row_limit_exceeded: bool
        """
        if self.local_vars_configuration.client_side_validation and row_limit_exceeded is None:  # noqa: E501
            raise ValueError("Invalid value for `row_limit_exceeded`, must not be `None`")  # noqa: E501

        self._row_limit_exceeded = row_limit_exceeded

    @property
    def duplicate_rows(self):
        """Gets the duplicate_rows of this ImportResult.  # noqa: E501

        Specifies number of duplicate rows  # noqa: E501

        :return: The duplicate_rows of this ImportResult.  # noqa: E501
        :rtype: int
        """
        return self._duplicate_rows

    @duplicate_rows.setter
    def duplicate_rows(self, duplicate_rows):
        """Sets the duplicate_rows of this ImportResult.

        Specifies number of duplicate rows  # noqa: E501

        :param duplicate_rows: The duplicate_rows of this ImportResult.  # noqa: E501
        :type duplicate_rows: int
        """
        if self.local_vars_configuration.client_side_validation and duplicate_rows is None:  # noqa: E501
            raise ValueError("Invalid value for `duplicate_rows`, must not be `None`")  # noqa: E501

        self._duplicate_rows = duplicate_rows

    @property
    def rows_imported(self):
        """Gets the rows_imported of this ImportResult.  # noqa: E501

        Specifies number of rows imported  # noqa: E501

        :return: The rows_imported of this ImportResult.  # noqa: E501
        :rtype: int
        """
        return self._rows_imported

    @rows_imported.setter
    def rows_imported(self, rows_imported):
        """Sets the rows_imported of this ImportResult.

        Specifies number of rows imported  # noqa: E501

        :param rows_imported: The rows_imported of this ImportResult.  # noqa: E501
        :type rows_imported: int
        """
        if self.local_vars_configuration.client_side_validation and rows_imported is None:  # noqa: E501
            raise ValueError("Invalid value for `rows_imported`, must not be `None`")  # noqa: E501

        self._rows_imported = rows_imported

    @property
    def errors(self):
        """Gets the errors of this ImportResult.  # noqa: E501

        List of errors during import  # noqa: E501

        :return: The errors of this ImportResult.  # noqa: E501
        :rtype: list[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ImportResult.

        List of errors during import  # noqa: E501

        :param errors: The errors of this ImportResult.  # noqa: E501
        :type errors: list[Error]
        """
        if self.local_vars_configuration.client_side_validation and errors is None:  # noqa: E501
            raise ValueError("Invalid value for `errors`, must not be `None`")  # noqa: E501

        self._errors = errors

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ImportResult):
            return True

        return self.to_dict() != other.to_dict()
