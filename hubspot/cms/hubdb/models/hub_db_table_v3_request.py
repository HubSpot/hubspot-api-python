# coding: utf-8

"""
    Hubdb

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.cms.hubdb.configuration import Configuration


class HubDbTableV3Request(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        "dynamic_meta_tags": "dict[str, int]",
        "allow_public_api_access": "bool",
        "use_for_pages": "bool",
        "columns": "list[ColumnRequest]",
        "name": "str",
        "enable_child_table_pages": "bool",
        "label": "str",
        "allow_child_tables": "bool",
    }

    attribute_map = {
        "dynamic_meta_tags": "dynamicMetaTags",
        "allow_public_api_access": "allowPublicApiAccess",
        "use_for_pages": "useForPages",
        "columns": "columns",
        "name": "name",
        "enable_child_table_pages": "enableChildTablePages",
        "label": "label",
        "allow_child_tables": "allowChildTables",
    }

    def __init__(
        self,
        dynamic_meta_tags=None,
        allow_public_api_access=None,
        use_for_pages=None,
        columns=None,
        name=None,
        enable_child_table_pages=None,
        label=None,
        allow_child_tables=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """HubDbTableV3Request - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._dynamic_meta_tags = None
        self._allow_public_api_access = None
        self._use_for_pages = None
        self._columns = None
        self._name = None
        self._enable_child_table_pages = None
        self._label = None
        self._allow_child_tables = None
        self.discriminator = None

        if dynamic_meta_tags is not None:
            self.dynamic_meta_tags = dynamic_meta_tags
        if allow_public_api_access is not None:
            self.allow_public_api_access = allow_public_api_access
        if use_for_pages is not None:
            self.use_for_pages = use_for_pages
        if columns is not None:
            self.columns = columns
        self.name = name
        if enable_child_table_pages is not None:
            self.enable_child_table_pages = enable_child_table_pages
        self.label = label
        if allow_child_tables is not None:
            self.allow_child_tables = allow_child_tables

    @property
    def dynamic_meta_tags(self):
        """Gets the dynamic_meta_tags of this HubDbTableV3Request.  # noqa: E501

        Specifies the key value pairs of the [metadata fields](https://developers.hubspot.com/docs/cms/guides/dynamic-pages/hubdb#dynamic-pages) with the associated column IDs.  # noqa: E501

        :return: The dynamic_meta_tags of this HubDbTableV3Request.  # noqa: E501
        :rtype: dict[str, int]
        """
        return self._dynamic_meta_tags

    @dynamic_meta_tags.setter
    def dynamic_meta_tags(self, dynamic_meta_tags):
        """Sets the dynamic_meta_tags of this HubDbTableV3Request.

        Specifies the key value pairs of the [metadata fields](https://developers.hubspot.com/docs/cms/guides/dynamic-pages/hubdb#dynamic-pages) with the associated column IDs.  # noqa: E501

        :param dynamic_meta_tags: The dynamic_meta_tags of this HubDbTableV3Request.  # noqa: E501
        :type dynamic_meta_tags: dict[str, int]
        """

        self._dynamic_meta_tags = dynamic_meta_tags

    @property
    def allow_public_api_access(self):
        """Gets the allow_public_api_access of this HubDbTableV3Request.  # noqa: E501

        Specifies whether the table can be read by public without authorization  # noqa: E501

        :return: The allow_public_api_access of this HubDbTableV3Request.  # noqa: E501
        :rtype: bool
        """
        return self._allow_public_api_access

    @allow_public_api_access.setter
    def allow_public_api_access(self, allow_public_api_access):
        """Sets the allow_public_api_access of this HubDbTableV3Request.

        Specifies whether the table can be read by public without authorization  # noqa: E501

        :param allow_public_api_access: The allow_public_api_access of this HubDbTableV3Request.  # noqa: E501
        :type allow_public_api_access: bool
        """

        self._allow_public_api_access = allow_public_api_access

    @property
    def use_for_pages(self):
        """Gets the use_for_pages of this HubDbTableV3Request.  # noqa: E501

        Specifies whether the table can be used for creation of dynamic pages  # noqa: E501

        :return: The use_for_pages of this HubDbTableV3Request.  # noqa: E501
        :rtype: bool
        """
        return self._use_for_pages

    @use_for_pages.setter
    def use_for_pages(self, use_for_pages):
        """Sets the use_for_pages of this HubDbTableV3Request.

        Specifies whether the table can be used for creation of dynamic pages  # noqa: E501

        :param use_for_pages: The use_for_pages of this HubDbTableV3Request.  # noqa: E501
        :type use_for_pages: bool
        """

        self._use_for_pages = use_for_pages

    @property
    def columns(self):
        """Gets the columns of this HubDbTableV3Request.  # noqa: E501

        List of columns in the table  # noqa: E501

        :return: The columns of this HubDbTableV3Request.  # noqa: E501
        :rtype: list[ColumnRequest]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this HubDbTableV3Request.

        List of columns in the table  # noqa: E501

        :param columns: The columns of this HubDbTableV3Request.  # noqa: E501
        :type columns: list[ColumnRequest]
        """

        self._columns = columns

    @property
    def name(self):
        """Gets the name of this HubDbTableV3Request.  # noqa: E501

        Name of the table  # noqa: E501

        :return: The name of this HubDbTableV3Request.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HubDbTableV3Request.

        Name of the table  # noqa: E501

        :param name: The name of this HubDbTableV3Request.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def enable_child_table_pages(self):
        """Gets the enable_child_table_pages of this HubDbTableV3Request.  # noqa: E501

        Specifies creation of multi-level dynamic pages using child tables  # noqa: E501

        :return: The enable_child_table_pages of this HubDbTableV3Request.  # noqa: E501
        :rtype: bool
        """
        return self._enable_child_table_pages

    @enable_child_table_pages.setter
    def enable_child_table_pages(self, enable_child_table_pages):
        """Sets the enable_child_table_pages of this HubDbTableV3Request.

        Specifies creation of multi-level dynamic pages using child tables  # noqa: E501

        :param enable_child_table_pages: The enable_child_table_pages of this HubDbTableV3Request.  # noqa: E501
        :type enable_child_table_pages: bool
        """

        self._enable_child_table_pages = enable_child_table_pages

    @property
    def label(self):
        """Gets the label of this HubDbTableV3Request.  # noqa: E501

        Label of the table  # noqa: E501

        :return: The label of this HubDbTableV3Request.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this HubDbTableV3Request.

        Label of the table  # noqa: E501

        :param label: The label of this HubDbTableV3Request.  # noqa: E501
        :type label: str
        """
        if self.local_vars_configuration.client_side_validation and label is None:  # noqa: E501
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def allow_child_tables(self):
        """Gets the allow_child_tables of this HubDbTableV3Request.  # noqa: E501

        Specifies whether child tables can be created  # noqa: E501

        :return: The allow_child_tables of this HubDbTableV3Request.  # noqa: E501
        :rtype: bool
        """
        return self._allow_child_tables

    @allow_child_tables.setter
    def allow_child_tables(self, allow_child_tables):
        """Sets the allow_child_tables of this HubDbTableV3Request.

        Specifies whether child tables can be created  # noqa: E501

        :param allow_child_tables: The allow_child_tables of this HubDbTableV3Request.  # noqa: E501
        :type allow_child_tables: bool
        """

        self._allow_child_tables = allow_child_tables

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HubDbTableV3Request):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HubDbTableV3Request):
            return True

        return self.to_dict() != other.to_dict()
