# coding: utf-8

"""
    Users

    Add, manage, and remove users from your account  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from hubspot.settings.users.configuration import Configuration


class PublicPermissionSet(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"id": "str", "name": "str", "requires_billing_write": "bool"}

    attribute_map = {
        "id": "id",
        "name": "name",
        "requires_billing_write": "requiresBillingWrite",
    }

    def __init__(
        self,
        id=None,
        name=None,
        requires_billing_write=None,
        local_vars_configuration=None,
    ):  # noqa: E501
        """PublicPermissionSet - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._requires_billing_write = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.requires_billing_write = requires_billing_write

    @property
    def id(self):
        """Gets the id of this PublicPermissionSet.  # noqa: E501

        The role's unique ID  # noqa: E501

        :return: The id of this PublicPermissionSet.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublicPermissionSet.

        The role's unique ID  # noqa: E501

        :param id: The id of this PublicPermissionSet.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and id is None
        ):  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this PublicPermissionSet.  # noqa: E501

        The role's name  # noqa: E501

        :return: The name of this PublicPermissionSet.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublicPermissionSet.

        The role's name  # noqa: E501

        :param name: The name of this PublicPermissionSet.  # noqa: E501
        :type: str
        """
        if (
            self.local_vars_configuration.client_side_validation and name is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `name`, must not be `None`"
            )  # noqa: E501

        self._name = name

    @property
    def requires_billing_write(self):
        """Gets the requires_billing_write of this PublicPermissionSet.  # noqa: E501

        Whether this role has a paid seat and requires the billing-write scope to assign/unassign to users  # noqa: E501

        :return: The requires_billing_write of this PublicPermissionSet.  # noqa: E501
        :rtype: bool
        """
        return self._requires_billing_write

    @requires_billing_write.setter
    def requires_billing_write(self, requires_billing_write):
        """Sets the requires_billing_write of this PublicPermissionSet.

        Whether this role has a paid seat and requires the billing-write scope to assign/unassign to users  # noqa: E501

        :param requires_billing_write: The requires_billing_write of this PublicPermissionSet.  # noqa: E501
        :type: bool
        """
        if (
            self.local_vars_configuration.client_side_validation
            and requires_billing_write is None
        ):  # noqa: E501
            raise ValueError(
                "Invalid value for `requires_billing_write`, must not be `None`"
            )  # noqa: E501

        self._requires_billing_write = requires_billing_write

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicPermissionSet):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicPermissionSet):
            return True

        return self.to_dict() != other.to_dict()
