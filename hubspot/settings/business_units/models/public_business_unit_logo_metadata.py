# coding: utf-8

"""
    Business Units Business Units

    Retrieve Business Unit information.  # noqa: E501

    The version of the OpenAPI document: v3
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from hubspot.settings.business_units.configuration import Configuration


class PublicBusinessUnitLogoMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {"logo_alt_text": "str", "resized_url": "str", "logo_url": "str"}

    attribute_map = {"logo_alt_text": "logoAltText", "resized_url": "resizedUrl", "logo_url": "logoUrl"}

    def __init__(self, logo_alt_text=None, resized_url=None, logo_url=None, local_vars_configuration=None):  # noqa: E501
        """PublicBusinessUnitLogoMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._logo_alt_text = None
        self._resized_url = None
        self._logo_url = None
        self.discriminator = None

        if logo_alt_text is not None:
            self.logo_alt_text = logo_alt_text
        if resized_url is not None:
            self.resized_url = resized_url
        if logo_url is not None:
            self.logo_url = logo_url

    @property
    def logo_alt_text(self):
        """Gets the logo_alt_text of this PublicBusinessUnitLogoMetadata.  # noqa: E501

        The logo's alt text  # noqa: E501

        :return: The logo_alt_text of this PublicBusinessUnitLogoMetadata.  # noqa: E501
        :rtype: str
        """
        return self._logo_alt_text

    @logo_alt_text.setter
    def logo_alt_text(self, logo_alt_text):
        """Sets the logo_alt_text of this PublicBusinessUnitLogoMetadata.

        The logo's alt text  # noqa: E501

        :param logo_alt_text: The logo_alt_text of this PublicBusinessUnitLogoMetadata.  # noqa: E501
        :type logo_alt_text: str
        """

        self._logo_alt_text = logo_alt_text

    @property
    def resized_url(self):
        """Gets the resized_url of this PublicBusinessUnitLogoMetadata.  # noqa: E501

        The logo's resized url  # noqa: E501

        :return: The resized_url of this PublicBusinessUnitLogoMetadata.  # noqa: E501
        :rtype: str
        """
        return self._resized_url

    @resized_url.setter
    def resized_url(self, resized_url):
        """Sets the resized_url of this PublicBusinessUnitLogoMetadata.

        The logo's resized url  # noqa: E501

        :param resized_url: The resized_url of this PublicBusinessUnitLogoMetadata.  # noqa: E501
        :type resized_url: str
        """

        self._resized_url = resized_url

    @property
    def logo_url(self):
        """Gets the logo_url of this PublicBusinessUnitLogoMetadata.  # noqa: E501

        The logo's url  # noqa: E501

        :return: The logo_url of this PublicBusinessUnitLogoMetadata.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this PublicBusinessUnitLogoMetadata.

        The logo's url  # noqa: E501

        :param logo_url: The logo_url of this PublicBusinessUnitLogoMetadata.  # noqa: E501
        :type logo_url: str
        """

        self._logo_url = logo_url

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(lambda x: convert(x), value))
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], convert(item[1])), value.items()))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicBusinessUnitLogoMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PublicBusinessUnitLogoMetadata):
            return True

        return self.to_dict() != other.to_dict()
